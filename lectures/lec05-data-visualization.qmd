# Data visualization with ggplot2

_Parts of this lesson material were taken and modified from [Data
Carpentry](https://datacarpentry.org) under their CC-BY copyright license. See
their [lesson page](https://datacarpentry.org/R-ecology-lesson/03-dplyr.html)
for the original source._

## Lesson preamble

> ### Learning Objectives
>
> - Produce scatter plots, line plots, and histograms using ggplot.
> - Set universal plot settings.
> - Understand how to combine dplyr and ggplot.
> - Understand and apply faceting in ggplot.
> 
> ### Lesson outline
>
> - Loading our data (10 min)
> - Plotting with `ggplot2` (15 mins)
> - Building plots iteratively (30 mins)
> - Split-apply-combine... plot! (30 mins)
> - Faceting (15 mins)
> - Exporting (10 mins)
 
-----

Now we have seen how to get our dataset in our desired shape and form (aka "tidy", where every column is a variable, and every row is an observation), we are of course itching to actually _see_ what the data actually looks like. Luckily, our favourite package-of-packages ```tidyverse``` got us covered -- it comes with a wonderful package for generating graphics called ```ggplot2```!

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
```

### Loading data using relative file pathways

We're going to install one new package today to help with loading and saving files. There are built-in functions, `setwd()` and `getwd()`, for *set*ting and *get*ting your *w*orking *d*irectory, but they're fragile and depend on the way you organise your files. Setting the working directory for one code chunk in your Rmd file may not carry through to the next chunk. 

The `here` package enables easy file referencing. It uses the top-level directory of a project to build paths to files.

```{r, eval=FALSE}
install.packages("here")
```

Use `here::i_am('path/to/this/file')` at the top of your R scripts to establish the root directory relative to your current file. Subsequent file paths can be made using the `here` function.

```{r}
library(here)
here()

here::i_am("lectures/lec05-data-visualization.qmd")
```

This established path remains stable even if the working directory is changed.

Now to load our portal data file using `here()`.

```{r}
# Download file if you can't find it on your computer
#download.file("https://ndownloader.figshare.com/files/2292169",
              # Pass a call to here() instead of the raw file path
#              here("lectures/data/portal_data.csv"))

# Read the locally-stored file into R
surveys <- read_csv(
  # Pass a call to here() instead of the raw file path
  here('lectures/data/portal_data.csv'))

# It's good practice to inspect your data frame to check for errors
head(surveys)
str(surveys)
```

This can help you check why your call to `read_csv()` can't find the data file you're looking for.

### Challenge

How would you establish the root directory in a file "data_tidying.Rmd" in a new project directory "Group_Project" using the `here` package? How would you then load your data file "raw_data.csv" if it was contained in the same "Group_Project" directory along with "data_tidying.Rmd"?

```{r, include=FALSE, eval=FALSE}
here::i_am("data_tidying.Rmd")

read_csv( here('raw_data.csv') )
```

**Note: You may want to set "eval=FALSE" in the code chunk header for your notes so that this code chunk doesn't run and mess up your root directory for this lecture.**


## Plotting with ggplot2

`ggplot2` is a plotting package that makes it simple to create complex plots
from data frames. The name `ggplot2` comes from its inspiration, the book [_A Grammar of Graphics_](https://www.springer.com/gp/book/9780387245447), and the main goal is to allow coders to distill complex data structure and express their desired graphical outcome in a concise manner instead of telling the computer every detail about what should happen. For example, you would say "colour my data by species" instead of "go through this data frame and plot any observations of species1 in blue, any observations of species2 in red, etc". Thanks to this functional way of interfacing with data, only minimal changes are required if the underlying data change or if you want to try a different type of visualization. Publication-quality plots can be created with minimal amounts of adjustment and tweaking.

`ggplot2` graphics are built step by step by adding new elements, or layers. Adding layers in this fashion allows for extensive flexibility and customization of plots. To
build a ggplot, we need to:

**1.** Use the `ggplot()` function and bind the plot to a specific data frame using the *data* argument

```{r}
ggplot(data = surveys)
```

Remember, if the arguments are provided in the right order then the names of the arguments can be omitted.

```{r}
ggplot(surveys)

# You can also use the %>% operator to pass the data to ggplot
surveys %>% 
  ggplot()
```

**2.** Define aesthetics (`aes`), by selecting the columns to be plotted and the presentation variables (ex: point size, shape, colour, etc.)

```{r}
ggplot(surveys, aes(x = weight, y = hindfoot_length))
```

**3.** Add `geoms` -- geometrical objects as a graphical representation of the data in the plot (points, lines, bars). `ggplot2` offers many different geoms. We will use a few common ones today, including:
      * `geom_point()` for scatter plots, dot plots, etc.
      * `geom_line()` for trend lines, time-series, etc.
      * `geom_histogram()` for histograms

To add a geom to the plot use `+` operator. Because we have two continuous variables (*weight* and *hindfoot_length*), let's use `geom_point()` first:

```{r}
ggplot(surveys, aes(x = weight, y = hindfoot_length)) +
  geom_point()
```

_Note: Notice that triangle-! warning sign above the plot? `ggplot` is telling you that it wasn't able to plot all of your data. Typically this means that there are NAs in the data, or that some data points lie outside of the bounds of the axes. Can you figure what it is in this instance?_

The `+` in the `ggplot2` package is particularly useful because it allows you to modify existing `ggplot` objects. This means you can easily set up plot "templates" and conveniently explore different types of plots. The above plot can be generated with code like this:

```{r, first-ggplot-with-plus}
# Assign plot to a variable
surveys_plot <- ggplot(surveys, aes(x = weight, y = hindfoot_length))

# Draw the plot
surveys_plot + geom_point()
```

Three notes: 

- Anything you put in the top `ggplot()` call can be seen/used by any geom layers that you add, including the x and y axis variables you set up in `aes()`. These are essentially universal plot settings.

- You can specify *aes*thetics for a geom independently of the aesthetics defined by `ggplot()`, which is particularly handy when you're layering data from different data frames

- The `+` sign used to add layers must be placed *at the end* of each line containing a layer. If it's used at the start of line, **`ggplot2`** will not add the new layer and R will return an error message.





### Building plots iteratively

Building plots with ggplot is typically an iterative process. Start simply. We will define the dataset to use, lay the axes, and choose one geom, as we just did:

```{r}
ggplot(surveys, aes(x = weight, y = hindfoot_length)) +
    geom_point()
```

Then, we start modifying this plot to extract more information from it. For instance, we can add the argument for transparency (`alpha`) to reduce overplotting:

```{r}
ggplot(data = surveys, aes(x = weight, y = hindfoot_length)) +
    geom_point(alpha = 0.2)
```

Based on the hindfoot length and the weights, there appears to be 4 clusters in this data. Potentially, one of the categorical variables we have in the data could explain this pattern. Colouring the data points according to a categorical variable is an easy way to find out if there seems to be correlation. Let's try colouring this points according to `plot_type`.

```{r}
ggplot(surveys, aes(x = weight, y = hindfoot_length, colour = plot_type)) +
    geom_point(alpha = 0.2)
```

It seems like the type of plot the animal was captured on correlates well with some of these clusters, but there are still many that are quite mixed. Let's try to do better! This time, the information about the data can provide some clues to which variable to look at. The plot above suggests that there might be 4 clusters, so a variable with 4 values is a good guess for what could explain the observed pattern in the scatter plot.

```{r}
surveys %>%
    summarize_all(n_distinct) 
# `n_distinct` is a function that counts unique values in a set of vectors
```

Remember that there are still `NA` values here, that's why there are 3 unique sexes although only male and female were coded in our original data set. There are four taxa so that could be a good candidate, let's see which those are.

```{r}
surveys %>%
    distinct(taxa)
```

It seems reasonable that these taxa contain animals different enough to have diverse weights and length of their feet. Lets use this categorical variable to colour the scatter plot.

```{r}
ggplot(surveys, aes(x = weight, y = hindfoot_length, colour = taxa)) +
    geom_point(alpha = 0.2)
```

Only rodents? That was unexpected... Let's check what's going on.

```{r}
surveys %>%
    group_by(taxa) %>%
    tally()
```

Definitely mostly rodents in our data set... 

```{r}
surveys %>%
    filter( !is.na(hindfoot_length) ) %>% # control by removing `!`
    group_by(taxa) %>%
    tally()
```

...and it turns out that only rodents have had their hindfeet measured! Rats.

Let's remove all records of animals without hindfoot measurements, including rodents. We'll also remove any observations that did not include weights.

```{r}
surveys_hf_wt <- surveys %>%
    filter(!is.na(hindfoot_length) & !is.na(weight))

surveys_hf_wt %>%
    summarize_all(n_distinct)
```

Maybe the genus of the animals can explain what we are seeing.

```{r}
ggplot(surveys_hf_wt, aes(x = weight, y = hindfoot_length, colour = genus)) +
    geom_point(alpha = 0.2)
```

Now this looks good! There is a clear separation between different genera but also significant spread within genus. For example, in the weight of the green _Neotoma_ observations. There are also two clearly separate clusters that are both coloured in olive green (_Dipodomys_). Maybe separating the observations into different species would be better?

```{r}
ggplot(surveys_hf_wt, aes(x = weight, y = hindfoot_length, colour = species)) +
    geom_point(alpha = 0.2)
```

Great! Together with the genus plot, this definitely seems to explain most of the variation we see in the hindfoot length and weight measurements. It is still a bit messy as it appears like we have around five clusters of data points but there are 21 species in the legend.

```{r}
surveys %>%
    filter(!is.na(hindfoot_length) & !is.na(weight)) %>%
    group_by(species) %>%
    tally() %>%
    arrange(desc(n))
```

There is a big drop from 838 to 159, let's include only those with more than 800 observations.

```{r}
surveys_abun_species <- surveys %>%
    filter(!is.na(hindfoot_length) & !is.na(weight)) %>%
    group_by(species) %>%
    mutate(n = n()) %>% # add count value to each row
    filter(n > 800) %>%
    select(-n)

surveys_abun_species %>%
  # Remember, print limits lines displayed when knitted
  print(10)
```

Still has almost 31k observations, so only ~3k observations were removed.

```{r}
surveys_abun_species %>%
  ggplot(aes(x = weight, y = hindfoot_length, colour = species)) +
  geom_point(alpha = 0.2)
```

The plot is now cleaner; there are fewer species and so fewer colours and the clusters are more distinct.



### Challenge

Create a scatter plot of *hindfoot_length* against *species* with the *weight* data displayed using colours. 
If you're unsure of which variable to put on which axis, Y variables are generally "against" X variables. Also, continuous variables are generally plotted on the Y axis.

```{r, include=FALSE}
surveys_abun_species %>%
  ggplot(aes(x = species, y = hindfoot_length, colour = weight)) +
    geom_point(size = 0.1)
```
Do you notice any potential issues with this plot given the sheer number of observations we know exist in the data?

```{r include=FALSE}
# We can improve it by adding a small amount of random noise to x variable
# `jitter` is used to visualize values with a lot of overlap
# here, we are jittering along the x-axis because the x-axis is categorical

surveys_abun_species %>%
  ggplot(aes(x = species, y = hindfoot_length, colour = weight)) +
    geom_jitter(size = 0.1, height = 0, width = 0.4)

# Can also pass "jitter" as a position argument to geom_point
surveys_abun_species %>%
  ggplot(aes(x = species, y = hindfoot_length, colour = weight)) +
    geom_point(size = 0.1, position = "jitter")
```

(This is further illustrating the **iterative** nature of constructing plots)






## Split-apply-combine... plot!

In this section, we will learn how to work with `dplyr` and `ggplot` together. Aided by the pipes (`%>%`), we can create a powerful data exploration workflow using these two packages.

Let's calculate number of counts per year for each species. First, we need to group the data and count records within each group:

```{r}
surveys_abun_species %>%
    group_by(year, species) %>%
    tally() %>%
    arrange(desc(n)) # Adding arrange just to compare with histogram
```

We could assign this table to a variable, and then pass that variable to `ggplot()`.

```{r, message=FALSE, warning=FALSE}
yearly_counts <- surveys_abun_species %>%
    group_by(year, species) %>%
    tally() %>%
    arrange(desc(n))

ggplot(yearly_counts, aes(x = n)) +
    geom_histogram()
```

Remember that a histogram plots the number of observations based on a variable, so you only need to specify the x-axis in the `ggplot()` call. Also, that a histogram's bin size can really change what you might understand about the data. The histogram geom has a *bins* argument that allows you to specify the number of bins and a *binwidth* argument that allows you to specify the size of the bins.

```{r}
ggplot(yearly_counts, aes(x = n)) +
    geom_histogram(bins=10)
```

Creating an intermediate variable would be preferable for time consuming calculations, because you would not want to do that operation every time you change the plot aesthetics.

If it is not a time consuming calculation or you would like the flexibility of changing the data summary and the plotting options in the same code chunk, you can pipe the output of your split-apply-combine operation to the plotting command:

```{r, message=FALSE, warning=FALSE}
surveys_abun_species %>%
    group_by(year, species) %>%
    tally() %>%
    ggplot(aes(x = n)) +
        geom_histogram()
```

We can perform a quick check that the plot corresponds to the table by colouring the histogram by species:

```{r, message=FALSE, warning=FALSE}
surveys_abun_species %>%
    group_by(year, species) %>%
    tally() %>%
  # We are using "fill" here instead of "colour"
    ggplot(aes(x = n, fill = species)) + 
        geom_histogram()
```

_Note: Here we are using `fill` to assign colours to species rather than `colour`. In general `colour` refers to the outline of points/bars or whatever it is you are plotting and `fill` refers to the colour that goes inside the point or bar. If you are confused, try switching out `fill` for `colour` to see what looks best!_

Let's explore how the number of each genus varies over time. Longitudinal data can be visualized as a line plot with years on the x axis and counts on the y axis:

```{r}
surveys_abun_species %>%
    group_by(year, species) %>%
    tally() %>%
    ggplot(aes(x = year, y = n)) +
        geom_line()
```

Unfortunately, this does not work because we plotted data for all the species together as one line. We need to tell `ggplot` to draw a line for each species by modifying the aesthetic function to include `group = species`:

```{r}
surveys_abun_species %>%
    group_by(year, species) %>%
    tally() %>%
    ggplot(aes(x = year, y = n, group = species)) +
        geom_line()
```

We will be able to distinguish species in the plot if we add colours (using `colour` also automatically groups the data):

```{r}
surveys_abun_species %>%
    group_by(year, species) %>%
    tally() %>%
  # `colour` groups automatically
    ggplot(aes(x = year, y = n, colour = species)) +
        geom_line() 
```





## Faceting

`ggplot` has a special technique called _faceting_ that allows the user to split one plot into multiple subplots based on a variable included in the dataset. This allows us to examine the trends associated with each grouping variable more closely. We will use it to make a time series plot for each species:

```{r}
surveys_abun_species %>%
    group_by(year, species) %>%
    tally() %>%
    ggplot(aes(x = year, y = n)) + 
        geom_line() +
        facet_wrap(~species)
```

Now we would like to split the line in each plot by the sex of each individual measured. To do that we need to make counts in the data frame after grouping by `year`, `species`, and `sex`:

```{r}
surveys_abun_species %>%
    group_by(year, species, sex) %>%
    tally()
```

We can reflect this grouping by sex in the faceted plot by splitting further with `colour` (within a single plot):

```{r}
surveys_abun_species %>%
    group_by(year, species, sex) %>%
    tally() %>%
    ggplot(aes(x = year, y = n, colour = sex)) +
        geom_line() +
        facet_wrap(~species)
```

There are several observations where sex was not recorded. Let's filter out those values.

```{r}
surveys_abun_species %>%
    filter(!is.na(sex)) %>%
    group_by(year, species, sex) %>%
    tally() %>%
    ggplot(aes(x = year, y = n, color = sex)) +
        geom_line() +
        facet_wrap(~species)
```

It is possible to specify exactly which colors[^colors] to use and to change the thickness of the lines to make the them easier to distinguish. 

[^colors]: There are so many colors to chose from in R. Check out the [R Color](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) doc to find something that brings you joy.

```{r}
surveys_abun_species %>%
    filter(!is.na(sex)) %>%
    group_by(year, species, sex) %>%
    tally() %>%
    ggplot(aes(x = year, y = n, colour = sex)) +
        geom_line(size = 1) +
        scale_colour_manual(values = c("black", "orange")) +
        facet_wrap(~species) 
```

Not sure what colours would look good on your plot? The R Community got you covered! Check out these awesome [color palettes](https://www.datanovia.com/en/blog/top-r-color-palettes-to-know-for-great-data-visualization/) where nice-looking color combos come predefined. We especially recommend the [`viridis` color palettes](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html). These palettes are not only pretty, they are specifically designed to be easier to read by those with colourblindness. 

Lastly, let's change the x labels so that they don't overlap, and remove the grey background to increase contrast with the lines. To customize the non-data components of the plot, we will pass some _theme_ statements[^theme] to `ggplot`.

```{r}
surveys_abun_species %>%
  filter(!is.na(sex)) %>%
  group_by(year, species, sex) %>%
  tally() %>%
  ggplot(aes(x = year, y = n, color = sex)) +
  geom_line(size = 1) +
  scale_colour_viridis_d() +
  facet_wrap(~species) +
  theme_classic() +
  theme(text = element_text(size = 12),
        axis.text.x = element_text(angle = 30, hjust = 1))
```

[^theme]: The amount of control over various plot elements in `ggplot` is truly astonishing. Check out the complete list of themes [here](https://ggplot2.tidyverse.org/reference/theme.html). Have fun!

There are other popular theme options, such as `theme_bw()`.

Our plot looks pretty polished now! It would be difficult to share with other, however, given the lack of information provided on the Y axis. Let's add some meaningful axis labels.

```{r polished}
surveys_abun_species %>%
  filter(!is.na(sex)) %>%
  group_by(year, species, sex) %>%
  tally() %>%
  ggplot(aes(x = year, y = n, color = sex)) +
  geom_line(size = 1) +
  scale_colour_viridis_d() +
  facet_wrap(~species) +
  theme_classic() +
  theme(text = element_text(size = 12),
        axis.text.x = element_text(angle = 30, hjust = 1)) +
  labs(title = "Rodent abundance over time",
       x = "Year",
       y = "Number observed",
       colour = "Sex")
```


### Challenge

Use the filtered data frame (`surveys_abun_species`) for part 2.

**1.** Remember the histogram coloured according to each species? Starting from that code, how could we separate each species into its own subplot? *Hint: look in the aplit-apply-comine section*

**2.a.** Create a plot that shows the average weight over years. Which year was the average weight of all animals the highest?

**2.b.** Iterate on the plot so it shows differences among species of their average weight over time. Is the yearly trend the same for all species?


```{r, include=FALSE}
# Answers
# 1
ggplot(yearly_counts, aes(x = n, fill = species)) +
    geom_histogram() +
    facet_wrap(~species)
```

```{r, include=FALSE}
# 2.a
surveys_abun_species %>%
    filter(!is.na(weight)) %>%
    group_by(year) %>%
    summarize(mean_weight = mean(weight)) %>%
    ggplot(aes(x = year, y = mean_weight)) +
        geom_line()
```

```{r, include=FALSE}
# 2.b
surveys_abun_species %>%
    filter(!is.na(weight)) %>%
    group_by(year, species) %>%
    summarize(mean_weight = mean(weight), .groups = "keep") %>%
    ggplot(aes(x = year, y = mean_weight, colour = species)) +
        geom_line() +
        facet_wrap(~ species)
```






## Export plots

Let's save our polished faceted plot. We will assign the entire plot to a new object.

```{r}
polished_plot <- surveys_abun_species %>%
  filter(!is.na(sex)) %>%
  group_by(year, species, sex) %>%
  tally() %>%
  ggplot(aes(x = year, y = n, color = sex)) +
  geom_line(size = 1) +
  scale_colour_viridis_d() +
  facet_wrap(~species) +
  theme_classic() +
  theme(text = element_text(size = 12),
        axis.text.x = element_text(angle = 30, hjust = 1)) +
  labs(title = "Rodent abundance over time",
       x = "Year",
       y = "Number observed",
       colour = "Sex")
```

If we don't already have a figures directory to save our plot in, we can create one in R. 

```{r}
# Reminding ourselves where we are
here()

dir.create( here("lectures/figures") )
```

We can use a conditional expression with `if()` to create the directory only if it doesn't already exist. The condition is inside the brackets "()" and the action to take if that's true is in the curly braces "{}".

```{r}
if( !dir.exists("lectures/figures")) {
  dir.create("lectures/figures")
}
```

With this, we can use `ggsave()` to save our plot. The first argument is a path to the filename we want to use, including the *file extension* you want. You can use .png, .jpg, .pdf, .tiff, and others. You'll need to specify the path relative to the current working directory, so we'll use `here()` to ensure the new file ends up where we expect.

The next argument is the name of the plot object in our environment that we want to save. 

We then have optional arguments such as the width and height of the image to be saved. You can also specify the units for the width and height, as "in", "cm", "mm", or "px".

```{r exec=FALSE}
ggsave( here("lectures/figures/survey_yearly_abundance.png"), 
        polished_plot, width = 8, height = 6, units = "in" )
```

### Challenge

Save the polished plot as a .jpg that's 300 by 250 pixels inside a directory called "figures".

```{r include=FALSE, exec=FALSE}
if( !dir.exists("lectures/figures")) {
  dir.create("lectures/figures")
}

ggsave( here("lectures/figures/survey_yearly_abundance.jpg"), 
        polished_plot, width = 300, height = 250, units = "px" )
```
