[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "",
    "text": "Syllabus"
  },
  {
    "objectID": "index.html#land-acknowledgement",
    "href": "index.html#land-acknowledgement",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Land Acknowledgement",
    "text": "Land Acknowledgement\nAlthough our students come from many locations around the world, we wish to recognize the land on which the University of Toronto was built. This land has historically been and still is the the home of the Huron-Wendat, the Seneca, and the Mississaugas of the Credit River.\nThere is a First Nations House for Indigenous Student Services on campus. Please refer to their web page for more resources and information about honouring our land and their services for students."
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Course Overview",
    "text": "Course Overview\nThis course covers statistical and data analysis, reproducible quantitative methods, and scientific computing in R to answer questions in ecology and evolutionary biology. Statistical and data analysis, modeling, and computing are essential skills for all biologists. This course is designed to meet a growing demand for reproducible, openly accessible, analytically thorough, and well-documented science. Students will learn to analyze and visualize data, develop mathematical models, and document their research using the R programming language. No prerequisite programming experience is required.\nPrerequisites: BIO220H1 and one of EEB225H1, STA288H1, or STA220H1\n\nTime\nTue and Thu 2:10 - 4:00 PM EST.\n\n\nClass Locations\nRW109 (Ramsay Wright first floor computer lab), St. George Campus.\n\n\n\nOffice hours (in EST)\n\n\n\n\n\n\nMete\nWeds 11-12pm\nESC3044\n\n\nVicki\nMon 11-12pm\nESC3044\n\n\nZoe\nThurs 4-5pm\nRW109\n\n\nJessie\nTues 4-5pm\nRW109\n\n\n\n\n\nContact protocol\nPlease address all course-related and project issues to both Vicki and Mete, with the exception that questions regarding assignments should be addressed to Zoe and Jessie. Prefix the subject matter with “EEB313”. If you do not receive a reply within 48 hours (excluding weekends), please send us a reminder."
  },
  {
    "objectID": "index.html#diversity-and-inclusion-statement",
    "href": "index.html#diversity-and-inclusion-statement",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Diversity and inclusion statement",
    "text": "Diversity and inclusion statement\nAs students, you all have something unique and special to offer to science. It is our intent that students from all backgrounds and perspectives be well served by this course, that students’ learning needs be addressed both in and out of class, and that the diversity that students bring to this class be recognized as a resource, strength, and benefit.\nDiversity can refer to multiple ways that we identify ourselves, including but not limited to race, national origin, language, cultural heritage, physical ability, neurodiversity, age, sexual orientation, gender identity, religion, and socio-economic class. Each of these varied, and often intersecting, identities, along with many others not mentioned here, shape the perspectives we bring to this class, to this department, and to the greater EEB community. We will work to promote diversity, equity, and inclusion not only because diversity fuels excellence and innovation, but because we want to pursue justice.\nWe expect that everybody in this class will respect each other, and demonstrate diligence in understanding how other people’s perspectives, behaviors, and worldviews may be different from their own. Racist, sexist, colonialist, homophobic, transphobic, and other abusive and discriminatory behavior and language will not be tolerated in this class and will result in disciplinary action, such as removal from class session or revocation of group working privileges. Please consult the University of Toronto Code of Student Conduct for details on unacceptable conduct and possible sanctions.\nPlease let us know if something said or done in this class, by either a member of the teaching team or other students, is particularly troubling or causes discomfort or offense. While our intention may not be to cause discomfort or offense, the impact of what happens throughout the course is not to be ignored and is something that we consider to be very important and deserving of attention. If and when this occurs, there are several ways to alleviate some of the discomfort or hurt you may experience:\n\nDiscuss the situation privately with a member of the teaching team. We are always open to listening to students’ experiences, and want to work with students to find acceptable ways to process and address the issue.\nNotify us of the issue through another source such as a trusted faculty member or a peer. If for any reason you do not feel comfortable discussing the issue directly with us, we encourage you to seek out another, more comfortable avenue to address the issue.\nContact the Anti-Racism and Cultural Diversity Office to report an incident and receive complaint resolution support, which may include consultations and referrals.\n\nWe acknowledge our imperfections while we also fully commit to the work, inside and outside of our classrooms, of building and sustaining a community that increasingly embraces these core values. Your suggestions and feedback are encouraged and appreciated. Please let us know ways to improve the effectiveness of the course for you personally or for other students or student groups."
  },
  {
    "objectID": "index.html#wellness-statement",
    "href": "index.html#wellness-statement",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Wellness statement",
    "text": "Wellness statement\nWe on the teaching team value your health and wellness. In order to succeed in this class, in university, and beyond, you must balance your work with rest, exercise, and attention to your mental and physical health. Working until exhaustion is NOT a badge of honor. If you are finding it difficult to balance your health and well-being with your work in this class, please do not hesitate to let us know. We are happy to help connect you with resources and services on campus and also to make accommodations to our course plan as needed. Our inboxes are always open, and we are also available for virtual chats by appointment. You have our support, and we believe in you."
  },
  {
    "objectID": "index.html#absence-policy",
    "href": "index.html#absence-policy",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Absence policy",
    "text": "Absence policy\nIf you are feeling unwell, please do not come to class. Instead, take the time to recover fully. Please let us know if you are feeling sick - you will not be penalized for missing a lecture, and we will do our best to ensure that you are up-to-date with class materials when you return."
  },
  {
    "objectID": "index.html#accessibility-needs",
    "href": "index.html#accessibility-needs",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Accessibility needs",
    "text": "Accessibility needs\nIf you require accommodations for a disability, or have any accessibility concerns about the course or course materials, please notify your course instructors (Mete and Vicki), or contact Accessibility Services, as soon as possible regarding accommodations."
  },
  {
    "objectID": "index.html#course-learning-outcomes",
    "href": "index.html#course-learning-outcomes",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Course learning outcomes",
    "text": "Course learning outcomes\n\nDevelop proficiency in the programming language R.\nUse R to apply statistical tools to analyze and interpret data.\nDevelop an understanding of mathematical models.\nDevelop proficiency in using the command line and Git.\nIntegrate appropriate techniques to analyze a variety of data types and formats.\nLearn and use techniques and best practices for reproducible, high-quality science.\nLearn how to work as part of a research team to produce a scientific product.\n\n\nLecture schedule\n\n\n\n\n\n\n\n\n\nWeek\nDate\nTopic\nInstructor\n\n\n\n\n1\nSep 7\nIntro to course, programming, RStudio\nVicki\n\n\n2\nSep 12\nR Markdown, project workflows\nVicki\n\n\n2\nSep 14\nBase R: Assignment, vectors, functions\nMete\n\n\n3\nSep 19\nData frames, intro to dplyr.\nVicki\n\n\n3\nSep 21\nData wrangling in dplyr\nVicki\n\n\n4\nSep 26\nData visualization in ggplot\nVicki\n\n\n4\nSep 28\nExploratory data analysis\nZoe\n\n\n5\nOct 03\nIntroduction to statistical inference\nMete\n\n\n5\nOct 05\nSimple linear models and generalized linear models\nMete\n\n\n6\nOct 10\nMixed models\nMete/Vicki\n\n\n6\nOct 12\nModel selection\nMete/Vicki\n\n\n7\nOct 17\nMultivariate statistics\nJessie\n\n\n7\nOct 19\nIntro to command line and GitHub\nMete/Vicki\n\n\n8\nOct 24\nComputer-intensive methods\nMete\n\n\n8\nOct 26\nMathematical models in ecology and evolution I\nMete\n\n\n9\nOct 31\nMathematical models in ecology and evolution II\nMete\n\n\n9\nNov 02\nWrap-up, review\nZoe/Jessie\n\n\n10\nNov 07\nReading break\n-\n\n\n10\nNov 09\nReading break\n-\n\n\n11\nNov 14\nProject work\n\n\n\n11\nNov 16\nProject work\n\n\n\n12\nNov 21\nProject work\n\n\n\n12\nNov 23\nProject work\n\n\n\n13\nNov 28\nProject work\n\n\n\n13\nNov 30\nProject work\n\n\n\n14\nDec 05\nGroup presentations\nEveryone\n\n\n\n\n\nLecture readings\nYou will find a list of recommended readings posted under “Resources”. Since there are no exams in this class, you will not be tested on the readings directly. However, we highly recommend that you go through these readings as they were chosen to help you understand lecture material better (e.g., provides context for data that was used) as well as serve as resources for you if you wish to pursue any specific topic further. We also compiled a list of open-access R and statistics resources for your reference. You can find this list in the Readings folder on Quercus.\n\n\nAssessment schedule\n\n\n\n\n\n\n\n\n\n\nAssignment\nType\nSubmitted on\nDue date\nMarks\n\n\n\n\nBasic R and dplyr\nIndividual\nQuercus\nSep 28\n8\n\n\nProject proposal\nGroup\nGitHub\nOct 03\n4\n\n\ndplyr and tidy data\nIndividual\nQuercus\nOct 05\n8\n\n\nData exploration\nIndividual\nQuercus\nOct 12\n8\n\n\nLM, GLM, & LMM\nIndividual\nQuercus\nOct 19\n8\n\n\nCommand Line\nIndividual\nGitHub\nOct 26\n8\n\n\nMid-project update\nGroup\nGitHub\nNov 02\n6\n\n\nChallenge assignment\nIndividual\nGitHub\nNov 17\n20\n\n\nPresentation\nGroup\nIn-class\nDec 05\n10\n\n\nFinal report\nGroup\nGitHub\nDec 08\n20\n\n\n\nThere are 100 marks in total. Your final course mark will be the sum of your assignment scores, which will be translated to a letter grade according to the official grading scale of the Faculty of Arts and Science.\nAssignments will be distributed and submitted in the R Markdown format via Quercus. Assignments will be handed out on Thursdays after class and are due at 8:00 PM on the following Thursday.\nThe Challenge Assignment is equivalent to a take home exam. The format will be the same as the other assignments, but this assignment is designed challenge you to go a little beyond what was taught in class. It will be distributed on 9:00 AM on Nov 13, and it will be due 11:59 PM on Nov 17. Students are welcome to work in a group on this assignment, but each student must submit their own original work. No extensions will be granted on this assignment except under the same extra-ordinary circumstances akin to those under which an exam might be deferred. We only expect you to do your best!\nAs per our stance on supporting student’s mental health, we are happy to accommodate a 72-hour extension for one of the assignments, no questions asked. Otherwise, except under extenuating circumstances, there will be a penalty of 5% per day (including weekends) for all late submissions. If you foresee needing an extension, please email both Vicki and Mete as soon as possible. This policy does not apply to the Challenge Assignment, Presentation and Final Report."
  },
  {
    "objectID": "index.html#improving-your-writing-skills",
    "href": "index.html#improving-your-writing-skills",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Improving your writing skills",
    "text": "Improving your writing skills\nEffective communication is crucial in science. The University of Toronto provides services to help you improve your writing, from general advices on effective writing to writing centers and writing courses. The Faculty of Arts & Science also offers an English Language Learning (ELL) program, which provides free individualized instruction in English skills. Take advantage of these!"
  },
  {
    "objectID": "index.html#academic-integrity",
    "href": "index.html#academic-integrity",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "Academic integrity",
    "text": "Academic integrity\nYou should be aware of the University of Toronto Code of Behaviour on Academic Matters. Also see How Not to Plagiarize. Notably, it is NOT appropriate to use large sections from internet sources, and inserting a few words here and there does not make it an original piece of writing. Be careful in using internet sources – most online material are not reviewed and there are many errors out there. Make sure you read material from many sources (published, peer-reviewed, trusted internet sources) and that you write an original text using this information. Always cite your sources. In case of doubt about plagiarism, talk to your instructors and TAs. Please make sure that what you submit for the final project does not overlap with what you submit for other classes, such as the 4th-year research project.\n\nOn the use of Generative AI\nThe knowing use of generative artificial intelligence tools, including ChatGPT and other AI writing and coding assistants, for the completion of, or to support the completion of, the assignments, the challenge assignment, or the final project is prohibited and may be considered an academic offense."
  },
  {
    "objectID": "index.html#fas-student-engagement-programs",
    "href": "index.html#fas-student-engagement-programs",
    "title": "EEB313: Quantitative Methods in R for Biology",
    "section": "FAS student engagement programs",
    "text": "FAS student engagement programs\nThere are a few programs on campus aimed at increasing student engagement with their coursework and keeping them socially connected. Recognized Study Groups are voluntary, peer-led study groups of up to 8 students enrolled in the same course. Meet to Complete are online drop-in study sessions for A&S undergrads. These are worth checking out if you are interested in participating in a study group."
  },
  {
    "objectID": "about-us.html#course-instructors",
    "href": "about-us.html#course-instructors",
    "title": "The 2023 teaching team",
    "section": "Course instructors",
    "text": "Course instructors\nMete Yuksel (mete.yuksel@mail.utoronto.ca)\nMete is a 2nd year PhD student in the Dept. Ecology and Evolutionary Biology at UTSG, and is co-advised by Matt Osmond & Nicole Mideo. He uses mathematical models to address questions in evolutionary genetics and ecology. He is currently developing theory to understand patterns, causes, and consequences of pathogen recombination. Mete was an undergraduate math & statistics student at the University of Idaho. There, he worked on the ecology of gene drive interventions against vectored diseases, understanding how continuous spatial structure can affect species coexistence, and forecasting the dynamics of Chinook salmon in the Willamette River system. He loves modeling, statistics, and programming in R (among other languages!) - and is thrilled to be teaching this course! Outside of science, he enjoys listening to podcasts, cooking, and cycling between Toronto neighborhoods in search of coffee.\nVicki Zhang (vm.zhang@mail.utoronto.ca)\nVicki is a PhD Candidate in Peter Kotanen’s lab at UTM. She studies invasive species at the edge of the Arctic, and how climate change and anthropogenic stressors might affect the persistence and spread of invasive species in Canada’s tundra and boreal forests. Vicki does fieldwork in Churchill, Manitoba (the polar bear capital of the world) in the summer, but does a lot of data analyses and modelling on R throughout the fall and winter semesters. She took EEB313 in 2018, and it was her favourite undergraduate course because everything about R just clicked, and she learned so much about coding, statistics, and modelling (her previous encounters with R and stats went very poorly). Now, she spends a lot of time making sure that her data is clean and her code is fast - it’s so satisfying when every line finally runs! For Vicki, the best way to work in R is with a big cup of coffee, soft classical music in the background, and her cat Remi napping next to her."
  },
  {
    "objectID": "about-us.html#teaching-assistants",
    "href": "about-us.html#teaching-assistants",
    "title": "The 2023 teaching team",
    "section": "Teaching assistants",
    "text": "Teaching assistants\nZoe Humphries (zoe.humphries@mail.utoronto.ca)\nZoë is a PhD student in the Wright and Barrett labs at UTSG. She studies the genome of a weedy plant to better understand how transposable elements affect sex chromosome evolution. She taught herself how to use R during her honours thesis and fell in love because it was much kinder than Lisp or C++ and, most importantly, because aesthetics. Zoë makes plots from aggressively large genomic data sets and spends a lot of time literally bash-ing her data into a file small enough for her computer to load into RStudio. For Zoë, the best way to work in R is while patting her puppies.\nJessie Wang (jae.wang@mail.utoronto.ca)\nJessie is a PhD student in the Frederickson lab at UTSG. She studies plant-microbe interactions using high-throughput experimentation in duckweeds. She fell in love with R during her time as an undergraduate and took EEB313 in 2020, simultaneously sharpening her coding skills while conducting research alone in the lab. Jessie loves to spend too much money on fancy coffee as she types away, making sure her code is well-annotated and her figures look beautiful. Outside of work, she enjoys caring for her many houseplants and aquariums, finding new delicious eats, and admiring other people’s pets."
  },
  {
    "objectID": "downloadingR.html#introduction",
    "href": "downloadingR.html#introduction",
    "title": "Downloading R",
    "section": "Introduction",
    "text": "Introduction\nThis course makes extensive use of R and RStudio. If you have any issues installing R or RStudio, let’s resolve them in advance so that you can make the most of our time together! As you follow these instructions, don’t worry if you don’t understand exactly what is going on - we will go through it all again during the first lecture! The goal here is to ensure that your computer is set up and ready for action. If you can’t complete these steps, please email Vicki and Mete as soon as possible."
  },
  {
    "objectID": "downloadingR.html#tech-requirements",
    "href": "downloadingR.html#tech-requirements",
    "title": "Downloading R",
    "section": "Tech Requirements",
    "text": "Tech Requirements\nFirst, make sure that your personal computer meets meets these requirements:\n\n1024×768 screen resolution,\n1.5GHz CPU,\n2GB RAM,\n10GB free disk space,\na recent version of Windows, Mac OS, or Linux is installed.\n\nNext, check that a robust internet browser such as Firefox, Safari or Google is installed. (Internet Explorer will not work.) Finally, make that a PDF viewer (e.g., Adobe Acrobat, Preview) is installed. It is fine if no PDF viewer is installed if you can view PDFs on your web browser."
  },
  {
    "objectID": "downloadingR.html#download-r-and-rstudio",
    "href": "downloadingR.html#download-r-and-rstudio",
    "title": "Downloading R",
    "section": "Download R and RStudio",
    "text": "Download R and RStudio\n\nDownload R, a free software environment for statistical computing and graphics from CRAN, the Comprehensive R Archive Network. We recommend you install a precompiled binary distribution for your operating system – use the links up at the top of the CRAN page!\n\nNote: MacBook users with an Apple Silicon chip (e.g., M1 or M2) should install the “arm64” version of R, while MacBook users with an Intel chip should install the regular (64-bit) version of R. You can check your laptop’s hardware specifications by clicking the Apple icon (top left corner) \\&gt; About This Mac.\n\nInstall RStudio, a graphical user interface (GUI) for R. Click the link under “2: Install RStudio”. RStudio comes with a text editor, so there is no immediate need to install a separate stand-alone editor.\n\nIf R is already installed, ensure that the R version is 4.0 or higher. You can do this by opening RStudio, where you should see a multi-section window like below. Locate the quadrant named “Console”, and put your cursor at the start of the prompt indicated by the &gt; symbol and where the red arrow is pointing. Type or copy sessionInfo() - make sure that only the I at the start of Info is capitalized and you are including the round brackets. Press enter to run this command and R should return an output to you. The first line shows what version of R is installed. Ensure that the R version installed is at least 4.0."
  },
  {
    "objectID": "downloadingR.html#download-packages",
    "href": "downloadingR.html#download-packages",
    "title": "Downloading R",
    "section": "Download Packages",
    "text": "Download Packages\n\nTinyTex\nThere is one package we have to install first before we can create PDF reports, which will be necessary for assignments and the project. Copy and paste into the console (where the \\&gt; symbol is) the two lines of code below to install a package called tinytex.\n\ninstall.packages(\"tinytex\") \ntinytex::install_tinytex()\n\n\n\nAll packages\n\nCopy and paste the below code into your console.\n\n\ninstall.packages(c(\"tidyverse\", \"here\", \"knitr\", \"datasauRus\", \"car\",\n                   \"lme4\", \"lmerTest\", \"ggalt\", \"MuMIn\", \"sjmisc\",\n                   \"lsmeans\", \"ggfortify\", \"vegan\"), dependencies = TRUE)\n\nDuring installation, if you ever get the below message, click “No”.\n\nIf you get the message “Do you want to install from sources the packages which need compilation? (Yes/no/cancel)” in the Console, type “Yes” and press enter.\n\nCheck that these packages have been installed correctly. To do this, go to the bottom right pane and click the tab for “Packages”. If you can search for and find the below packages, then they have been installed! They do not need to be checked off. Alternatively, go to the Console and type library(lme4) to verify that the lme4 package is installed. An error along the lines “there is no package called lme4” will be returned if the package is not installed."
  },
  {
    "objectID": "lec00-rstudio.html#lesson-preamble",
    "href": "lec00-rstudio.html#lesson-preamble",
    "title": "1  Getting started with RStudio and R Notebook",
    "section": "Lesson preamble",
    "text": "Lesson preamble\n\n1.0.1 Lesson objectives\n\nIntroduce students to the RStudio interface\nIntroduce the Markdown syntax and how to use it within the R Notebook\n\n1.0.2 Learning outline\n\nExplore RStudio interface (20 mins)\nRMarkdown (20 mins)\nGenerating reports (10 mins)\nKnit to PDF and submit on Quercus (10 mins)"
  },
  {
    "objectID": "lec00-rstudio.html#working-with-computers",
    "href": "lec00-rstudio.html#working-with-computers",
    "title": "1  Getting started with RStudio and R Notebook",
    "section": "Working with computers",
    "text": "Working with computers\nBefore we get into more practical matters, we want to provide a brief background to the idea of working with computers. Essentially, computer work is about humans communicating with a computer by modulating flows of current in the hardware in order to get the computer to carry out advanced calculations that we are unable to efficiently compute ourselves. Early examples of human computer communication were quite primitive and included physically disconnecting a wire and connecting it again in a different spot. Luckily, we are not doing this anymore; instead we have programs with graphical user interfaces with menus and buttons that enable more efficient human to computer communication.\n\n1.0.3 Graphical user interfaces vs. text based user interfaces\nAn example of such a program that many of you are familiar with is spreadsheet software such as Microsoft Excel. Here, all the functionality of the program is accessible via hierarchical menus, and clicking buttons sends instructions to the computer, which then responds and sends the results back to your screen. For instance, I can click a button to send the instruction of coloring this cell yellow, and the computer interprets my instructions and then displays the results on the screen.\nSpreadsheet software is great for viewing and entering small data sets and creating simple visualizations fast. However, it can be tricky to design figures, create automatic reproducible analysis workflows, perform advanced calculations, and reliably clean data sets. Even when using a spreadsheet program to record data, it is often beneficial to have some some basic programming skills to facilitate the analyses of those data.\nTyping commands directly instead of searching for them in menus is a more efficient approach to communicate with the computer and a powerful way of doing data analysis. This is initially intimidating for almost all people, but if you compare it to learning a new language, the process becomes more intuitive: when learning a language, you would initially string together sentences by looking up individual words in the dictionary. As you improve, you will only reference the dictionary occasionally since you already know most of the words. Eventually, you will throw the dictionary out altogether because it is faster and more precise to speak directly. In contrast, graphical programs force you to look up every word in the dictionary every time, even if you already know what to say.\n\n\n1.0.4 RStudio and the R Notebook\nRStudio includes the R console, but also many other convenient functionalities, which makes it easier to get started and to work with R. When you launch RStudio, you will see four panels. Starting at the top left and going clockwise, these panels are:\n\nThe text editor panel. This is where we can write scripts, i.e. putting several commands of code together and saving them as a text document so that they are accessible for later and so that we can execute them all at once by running the script instead of typing them in one by one.\nThe environment panel, which shows us all the files and objects we currently loaded into R.\nThe files-plots-help panel. This panel shows the files in the current directory (the folder we are working out of), any plots we make later, and also documentation for various packages and functions. Here, the documentation is formatted in a way that is easier to read and also provides links to the related sections.\nThe console is another space we can input code, only now the code is executed immediately and doesn’t get saved at the end.\n\nTo change the appearance of your RStudio, navigate to Tools &gt; Global Options &gt; Appearance. You can change the the font and size, and the editor theme. The default is “Textmate”, but if you like dark mode, I recommend “Tomorrow Night Bright”. You can also change how your panels are organized. I like to have my Console and history below my Source, and that way I can see my working environment next to my code. That way, I know if an error I am getting is because I am missing an object or I renamed something oddly. Let’s change that now. I recommend playing around with the appearance if you prefer a different layout or colour scheme. Do what makes you the most productive!\nAnother very useful thing with RStudio is that you have access to some excellent cheat sheets in PDF format straight from the menu: Help -&gt; Cheatsheets!\nIn the RStudio interface, we will be writing code in a format called the R Notebook. As the name entails, this interface works like a notebook for code, as it allows us to save notes about what the code is doing, the code itself, and any output we get, such as plots and tables, all together in the same document.\nWhen we are in the Notebook, the text we write is normal plain text, just as if we would be writing it in a text document. If we want to execute some R code, we need to insert a code chunk.\nYou insert a code chunk by either clicking the “Insert” button or pressing Ctrl/Command + Alt + i simultaneously. You could also type out the surrounding backticks, but this would take longer. To run a code chunk, you press the green arrow, or Ctrl/Command + Shift + Enter.\n\n1+1\n#&gt; [1] 2\n\nAs you can see, the output appears right under the code block.\nThis is a great way to perform explore your data, since you can do your analysis and write comments and conclusions right under it all in the same document. A powerful feature of this workflow is that there is no extra time needed for code documentation and note-taking, since you’re doing your analyses and taking notes at the same time. This makes it great for both taking notes at lectures and to have as a reference when you return to your code in the future."
  },
  {
    "objectID": "lec00-rstudio.html#r-markdown",
    "href": "lec00-rstudio.html#r-markdown",
    "title": "1  Getting started with RStudio and R Notebook",
    "section": "1.1 R Markdown",
    "text": "1.1 R Markdown\nThe text format we are using in the R Notebook is called R Markdown. This format allows us to combine R code with the Markdown text format, which enables the use of certain characters to specify headings, bullet points, quotations and even citations. A simple example of how to write in Markdown is to use a single asterisk or underscore to emphasize text (*emphasis*) and two asterisks or underscores to strongly emphasize text (**strong emphasis**). When we convert our R Markdown text to other file formats, these will show up as italics and bold typeface, respectively. If you have used WhatsApp, you might already be familiar with this style of writing. In case you haven’t seen it before, you have just learned something about WhatsApp in your quantitative methods class…\nTo learn more about R Markdown, you can read the cheat sheets in RStudio and RStudio Markdown reference online.\n\n1.1.1 Saving data and generating reports\nTo save our notes, code, and graphs, all we have to do is to save the R Notebook file, and the we can open it in RStudio next time again. However, if we want someone else to look at this, we can’t always just send them the R Notebook file, because they might not have RStudio installed. Another great feature of R Notebooks is that it is really easy to export them to HTML, MS word, or PDF documents with figures and professional typesetting. There are actually many academic papers that are written entirely in this format and it is great for assignments and reports. (You might even use it to communicate with your collaborators!) Since R Notebook files convert to HTML, it is also easy to publish simple and good-looking websites in it, in which code chunks are embedded nicely within the text.\nLet’s try to create a document in R.\nFirst, let’s set up the YAML block. This is found at the top of your document, and it is where you specify the title of your document, what kind of output you want, and a few other things such as author list and date.\n\n---\ntitle: \"Your title here\"\nauthor: \"Your name here\"\ndate: \"Insert date\"\n---\n\nThen, let’s type some notes and code together!\n\n# Attempt 1\n\n## Here goes!\n\n\n1+2+3+4\n#&gt; [1] 10\n\nx &lt;- seq(0,100,1)\n\nplot(x, type = \"l\")\n\n\n\n\n\n\n\n\nLet’s see what this looks like. To create the output document, we poetically say that we will knit our R Markdown into the HTML document. Luckily, it is much simpler than actually knitting something. Simply press the Knit button here and the new document will be created.\nAs you can see in the knitted document, the title showed up as we would expect, the lines with pound sign(s) in front of them were converted into headers and we can see both the code and its output! So the plots are generated directly in the report without us having to cut and paste images! If we change something in the code, we don’t have to find the new images and paste it in again, the correct one will appear right in your code.\nWhen you quit, R will ask you if you want to save the workspace (that is, all of the variables you have defined in this session); in general, you should say “no” to avoid clutter and unintentional confusion of results from different sessions. Note: When you say “yes” to saving your workspace, it is saved in a hidden file named .RData. By default, when you open a new R session in the same directory, this workspace is loaded and a message informing you so is printed: [Previously saved workspace restored]."
  },
  {
    "objectID": "lec00-rstudio.html#exercise",
    "href": "lec00-rstudio.html#exercise",
    "title": "1  Getting started with RStudio and R Notebook",
    "section": "Exercise",
    "text": "Exercise\n\n1.1.2 Knitting and Submitting on Quercus\nPractice knitting and uploading your file to Quercus!\nClick the dropdown “Knit” button at the top of the screen, and click “PDF”.\nNote: for assignments, submit PDF versions. If you are having trouble rendering your knitted file, you can submit HTML formats, or your .Rmd file as a last resort. Note that, if you are unable to knit your assignment, chances are there is an error. Make sure to double-check your code!\nHead on over to Quercus and submit your knitted PDF to “Assignment 0”."
  },
  {
    "objectID": "lec01-markdown-workflows.html#lesson-preamble",
    "href": "lec01-markdown-workflows.html#lesson-preamble",
    "title": "2  Markdown, project workflows",
    "section": "2.1 Lesson preamble",
    "text": "2.1 Lesson preamble\n\n2.1.1 Lesson objectives\n\nLearn about the Markdown syntax and how to use it within the R Notebook.\nSet up the R Notebook\nSet up an R Project\nUnderstand how to follow the conventional data science workflow\n\n\n\n2.1.2 Learning outline\n\nExplore RStudio interface (10 mins)\nReproducible science with Markdown (40 mins)\nProject-Oriented Workflow (20 mins)\nReproducible Science (10 mins)\nThe Scientific Method (10 mins)\nFind your groups! (10 mins)"
  },
  {
    "objectID": "lec01-markdown-workflows.html#markdown",
    "href": "lec01-markdown-workflows.html#markdown",
    "title": "2  Markdown, project workflows",
    "section": "2.2 Markdown",
    "text": "2.2 Markdown\nLast class, we introduced Markdown, the text format that RStudio uses. In fact, if you are following along this far, you should have already been typing your notes and code in a .Rmd file, or a RMarkdown file.\nLet’s introduce more Markdown features! We encourage groups to try completing their group projects in RMarkdown, but more about that later.\n\n2.2.1 In-line code\nWe talked about using RMarkdown for notes and inline code last class. This is extremely useful for when you need to update objects or rerun analyses. You can also comment out code within the code chunk.\nAs a reminder, the keyboard shortcut to insert a code chunk is:\n\ncommand + option + i (Mac)\nctrl + alt + i (Windows)\n\n\nx &lt;- 5\ny &lt;- 13\n\n# 5 plus 13\nx + y\n\n[1] 18\n\n\n\n2.2.1.1 R code chunk tricks\n\neval=TRUE evaluates the code chunk (runs it); eval=FALSE does not (will just print the chunk)\necho=TRUE prints the code chunk; echo=FALSE hides it but will still evaluate it\n\nthis is useful if you need to save something as an object but you don’t necessarily need it to print\n\nwarning=FALSE will hide warnings; message=FALSE will hide messages from output\n\nonly the case when eval=TRUE\n\n\n\n## eval=TRUE, echo=FALSE prints output, but does not print code chunk\nlibrary(ggplot2)\nqplot(mpg, wt, data = mtcars)\n\nWarning: `qplot()` was deprecated in ggplot2 3.4.0.\n\n\n\n\n\n\n\n2.2.1.2 Changing height and width of images/figures\nYou can also indicate the sizes of figures by using fig.width and fig.height in your code chunk.\n\n## in this R chuck, fig.width=2, fig.height=2\nqplot(mpg, wt, data = mtcars)\n\n\n\n\n\n\n\n2.2.2 Lists\nI’ve already used these! You can use either * or - to indicate unordered lists. To indent, hit tab. Make sure there’s a space before your items in the list.\nUnordered Lists (bullet points)\n\nfirst item\nsecond item\n\nsub-level item (two tabs)\n\nthird item\n\nFor ordered lists, use numbers. Again, hit tab to add sublists.\nOrdered Lists (numbers)\n\nOrdered item\nOrdered item\n\nOrdered sub-item\n\nItem (will automatically re-number)\n\n\n\n2.2.3 Tables\nkable displays r code chunks with tables nicely\nlibrary(knitr)\nkable(head(mtcars))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nMazda RX4\n21.0\n6\n160\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\n\n\nIn comparison:\nlibrary(knitr)\nhead(mtcars) ## does not nicely format the table\n               mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1\n\n\n2.2.4 Images and Links\nUse the following format to add images:\n![Description/Caption](/path/to/image.png)\nFor example: \nAs an aside, let’s talk about rubber duck debugging. It is a simple but effective technique used by scientists to debug code. By explaining the code line-by-line to an inanimate object, such as a rubber duck, programmers can break down the code into smaller, more manageable pieces, and potentially identify the root cause of the problem. Or, explain it to a friend in the course! They can also help you find typos and other errors\nAnd use the following format to add weblinks: [Description/Caption](weblink).\nThe EEB website lives here!\n\n\n2.2.5 White Space and New Page\nUse \\vspace{2pt} to add white space, and use \\newpage to add a page break.\n\n\n2.2.6 In-line citations and bibliography\nExport a .bib file (e.g., from Zotero and Mendeley). Then, add the .bib to your YAML header.\n---\ntitle: My Report\noutput: html_document\nbibliography: bibliography.bib\n---\nNow, you can cite directly in your report, like below:\nSome fact[@Smith2018]\nSome fact supported by multiple papers [@Smith2018; @Tran1997]\n\n\n2.2.7 Footnotes\nThis is what a footnote looks like.1 Here is another.2"
  },
  {
    "objectID": "lec01-markdown-workflows.html#project-oriented-workflow",
    "href": "lec01-markdown-workflows.html#project-oriented-workflow",
    "title": "2  Markdown, project workflows",
    "section": "2.3 Project-Oriented Workflow",
    "text": "2.3 Project-Oriented Workflow\n\n2.3.1 Projects\nMaterial adapted from Posit and R-bloggers.\nRStudio projects make it straightforward to divide your work into multiple contexts, each with their own working directory, workspace, history, and source documents.\nTo create a new project in the RStudio IDE, use the Create Project command (top right). You can link your new project to an existing directory, or create a new directory entirely. Since we already have some RMarkdown written, let’s add our project to an existing directory.\nWhen a new project is created RStudio, it creates a project file (with an .Rproj extension) within the project directory. This file contains various project options (discussed below) and can also be used as a shortcut for opening the project directly from the filesystem. It also creates a hidden directory (named .Rproj.user) where project-specific temporary files (e.g., auto-saved source documents, window-state, etc.) are stored. This directory is also automatically added to .Rbuildignore, .gitignore, etc. if required.\nNow, whenever you open your project, it loads your project into RStudio and displays its name in the Projects toolbar (which is located on the far right side of the main toolbar). It even takes you back to where you were working last, so it opens all the scripts and files that were last open! You can also save your history, the objects in your environment, and an image of what your project looked like at the last time you closed it, but this can take up a lot of space if you do this each time.\nYou can work with more than one RStudio project at a time by simply opening each project in its own window of RStudio.\n\n\n2.3.2 Relative File Pathways\nThe goal of the here package is to enable easy file referencing in project-oriented workflows. In contrast to using setwd(), which is fragile and dependent on the way you organize your files, here uses the top-level directory of a project to easily build paths to files.\n\nlibrary(here)\n\nhere() starts at /Users/vicki.zhang/Documents/UofT/PhD/Teaching/2023-2024/eeb313.github.io\n\nhere()\n\n[1] \"/Users/vicki.zhang/Documents/UofT/PhD/Teaching/2023-2024/eeb313.github.io\"\n\n\nYou can build a path relative to the top-level directory in order to read or write a file:\n\nhere(\"1_lectures\", \"csv\", \"portal_data.csv\")\n\n[1] \"/Users/vicki.zhang/Documents/UofT/PhD/Teaching/2023-2024/eeb313.github.io/1_lectures/csv/portal_data.csv\"\n\n\nThese relative paths work regardless of where the associated source file lives inside your project, like analysis projects with data and reports in different subdirectories.\n\n\n2.3.3 Demo Project\nThere is no a single “right” folder structure for analysis projects. However, this is a tried-and-true simple method that works (backed up by many data scientists!).\nCreate a folder on your computer that holds all the files relevant to that particular piece of work. This parent folder will contain the project’s .Rproj and all other subfolders, so it should have the same name as your project. Pick a good one. Spending an extra 5 minutes will save you from regrets in the future. The name should be short, concise, written in lower-case, and not containing any special symbols. One can apply similar strategies as for naming packages.\nUse subdirectories to organize data, code, figures, notes, etc.\n\nThe folder data typically contains two subfolders, namely, raw and processed. The content of raw directory is data files of any kind, such as .csv, SAS, Excel, text and database files, etc. The content of this folder is read-only, so that no scripts should change the original files or create new ones inside it. For this purpose, the processed directory is used: all processed, cleaned, and tidied datasets are saved here. It is a good practice to save files in R specific format, rather than in .csv, since the saving in .csv is a less efficient way of storing data (both in terms of space and time of reading/writing).\nThe folder figures is the place where you may store plots, diagrams, and other figures. There is not much to say about it. Common extensions of such files are .eps, .png, .pdf, etc. Again, file names in this folder should be meaningful (the name img1.png does not represent anything).\nAll reports live in a directory with the corresponding name reports. These reports can be of any formats, such as LaTeX, Markdown, R Markdown, Jupyter Notebooks, etc. Currently, more and more people prefer rich documents with text and executable code to LaTeX and such.\nPerhaps the most important folder is analyses or scripts. Here, you keep all your R scripts and codes. That is the exact place to use prefix numbers, if files should be run in a particular order. If you have files in other scripted languages (e.g., Python), it is better to keep them in this folder as well. There can also an important subfolder called deprecated. Whenever you want to remove one or the other script, it is a good idea to move it to deprecated at first iteration. I recommend never deleting your code until you are sure that you have finished everything you wanted to do, even if the code doesn’t work (going back to it after a break usually helps!).\n\n\n\n\nVicki’s demo of her file directory.\n\n\nThis convention guarantees that the project is self-contained, and it can be moved around on your computer or onto other computers and will still “just work”. This is a really important convention that creates reliable, reproducible science across different computers or users and over time.\n\n\n2.3.4 Documenting session info\nAs an overview of our environment, we can also use the sessionInfo() command. This is a good practice to have at the end of your code to document which packages you used and what version they were.\n\nsessionInfo()\n\nR version 4.1.1 (2021-08-10)\nPlatform: x86_64-apple-darwin17.0 (64-bit)\nRunning under: macOS Big Sur 10.16\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRblas.0.dylib\nLAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib\n\nlocale:\n[1] en_CA.UTF-8/en_CA.UTF-8/en_CA.UTF-8/C/en_CA.UTF-8/en_CA.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] here_1.0.1    knitr_1.43    ggplot2_3.4.3\n\nloaded via a namespace (and not attached):\n [1] rstudioapi_0.15.0 magrittr_2.0.3    tidyselect_1.2.0  munsell_0.5.0    \n [5] colorspace_2.1-0  R6_2.5.1          rlang_1.1.1       fastmap_1.1.1    \n [9] fansi_1.0.4       dplyr_1.1.2       tools_4.1.1       grid_4.1.1       \n[13] gtable_0.3.4      xfun_0.40         utf8_1.2.3        cli_3.6.1        \n[17] withr_2.5.0       htmltools_0.5.6   rprojroot_2.0.3   yaml_2.3.7       \n[21] digest_0.6.33     tibble_3.2.1      lifecycle_1.0.3   farver_2.1.1     \n[25] htmlwidgets_1.6.2 vctrs_0.6.3       glue_1.6.2        evaluate_0.21    \n[29] rmarkdown_2.24    labeling_0.4.3    compiler_4.1.1    pillar_1.9.0     \n[33] generics_0.1.3    scales_1.2.1      jsonlite_1.8.7    pkgconfig_2.0.3  \n\n\nNotice that we have some base packages active even though we did not explicitly call for them."
  },
  {
    "objectID": "lec01-markdown-workflows.html#reproducible-science",
    "href": "lec01-markdown-workflows.html#reproducible-science",
    "title": "2  Markdown, project workflows",
    "section": "2.4 Reproducible Science",
    "text": "2.4 Reproducible Science\n\nComputational reproducibility\n\ncode, software, etc.\n\nScientific reproducibility\n\ndata (able to run the same statistical analysis on the same data)\nmethod, details about how the data was collected\nN.B., field work - hard to reproduce method\n\nStatistical reproducibility\n\n\nWhy does reproducibility matter in science?\n\nMust trust findings to build on scientific progress!\n\nWhat do you think about when you hear the term “open science”?\n\nOpen science: everything about a project (data, stats, code, funding, etc.) is open and available to viewing\n\nHow does open science affect collaboration and the progress of science?\n\nWhat are the barriers to reproducibility?\n\npeople won’t care\npeople might want to steal results\nresearchers do not want to share (embarrassed, code is rushed, etc.)\n\n\n2.4.1 Reproducibility in Data Science\nMaterial from this section adapted from R for Data Science.\nThe main tools of data science are: importing, tidying, transforming, and visualizing data. We will go through all of these steps of data science so that you can tackle real datasets.\n\n\n\nData Science Workflow\n\n\n\nBefore you can transform and visualize your data, you need to first get your data into R.\nThen, you’ll learn about tidy data, a consistent way of storing your data that makes transformation, visualization, and modelling easier. You’ll learn the underlying principles, and how to get your data into a tidy form.\nYou’ll learn the key verbs that allow you to select important variables, filter out key observations, create new variables, and compute summaries.\nFinally, we will visualize by making elegant and informative plots that help you understand data.\n\nNote that if you are interested in doing a modelling project, these steps are different. Talk to Vicki and Mete if you want to tackle mathematical models!"
  },
  {
    "objectID": "lec01-markdown-workflows.html#the-scientific-method",
    "href": "lec01-markdown-workflows.html#the-scientific-method",
    "title": "2  Markdown, project workflows",
    "section": "2.5 The Scientific Method",
    "text": "2.5 The Scientific Method\n\n2.5.1 Steps in scientific process\n\nIdentify research question(s).\nLook into what the previous literature shows.\nCreate one or more hypotheses or objectives.\nWrite up an outline or expected approach to answering those questions/objectives (analysis and presentation plan):\n\n\nHow will the data be obtained and what is the data (i.e. the source)?\nWhat statistical/mathematical techniques have previous researchers used? Will you use them? Are they appropriate (optional, may need expert)? ( How will the results/data be presented or visualized (possible tables/figures)?\n\n\nRun the planned analyses (or additional ones that come may up).\nVisualize or present all results from the analyses.\nInterpret the results and how they fit with the previous literature.\nDraw conclusions based on the hypotheses/objectives.\nDisseminate your results (in blogs, pre-print archives, journals, conferences)\n\n\n\n\nSimplified diagram of the scientific method\n\n\n\n\n2.5.2 Basics of succeeding as a team\nFinal assignment is in a group and to succeed, you need to understand team dynamics:\n\nCommunication is vital to work together and to achieve the goal\nTeams go through various stages\nNeed consensus for group norms, goals, duties/responsibilities, and conduct/behaviour\nImportant that everyone has a stake in the project\nRotate roles (specifically for the leader/facilitator)\n\n\n\n2.5.3 Roles and responsibilities\n\nLeader/Facilitator’s duty:\n\nGoal is to keep things running smoothly, focused on the task, and on track for time\nKeep everyone on topic and on task; stay aware of the time\n(Try to) mediate or resolve any conflicts (there will always be some type of conflict; how it’s dealt with is what matters)\n(Try to) encourage everyone to participate and allow everyone a chance at talking\n\nRecorder’s duty:\n\nGoal is to write/type down main or important points raised or discussed when team is meeting\nKeep notes and files organized and orderly\n\nOrganizer’s duty:\n\nArrange for next meeting time and location\n\nSend reminders to members a day or two before meeting\n\nMake and email a simple agenda of tasks to do or to discuss\n\n\n\n\n2.5.4 Code of Conduct\n\nVital to establishing boundaries and expectations of being a team member\n\nHow do you want each member to treat each other?\nHow do you deal with conflict?\nWhat is acceptable and unacceptable behaviour?\n\nThese are outlined in the code of conduct\nMostly its common sense (be kind and respectful)\n\nBut its important that you as a team write out what everyone wants and agrees to\n\n\n\n2.5.4.1 Example Code of Conduct\nCheck out the Contributor Convenent and the UofT Coders Code of Conduct"
  },
  {
    "objectID": "lec01-markdown-workflows.html#projects-1",
    "href": "lec01-markdown-workflows.html#projects-1",
    "title": "2  Markdown, project workflows",
    "section": "2.6 Projects!",
    "text": "2.6 Projects!\n\n2.6.1 Exercise after groups are formed\nAs a group, complete these tasks:\n\nGet into your groups\nIntroduce one another:\n\n\nName, year of study\nOther stuff (e.g., interests, plans for next years, etc.)\n\n\nCreate a “team name”\nAssign roles to each other:\n\n\nThese will be rotated: Leader/Facilitator, Recorder, Organizer\nDiscuss how and when the roles will be rotated.\n\n\nDiscuss and brainstorm code of conduct (record it).\nTake a minute to think about your own skills\n\n\nShare these with your group (record them).\n\n\nDiscuss how responsibilities of each member will be decided on (record it).\n\n\n\n2.6.2 GitHub\nMake a GitHub account."
  },
  {
    "objectID": "lec01-markdown-workflows.html#footnotes",
    "href": "lec01-markdown-workflows.html#footnotes",
    "title": "2  Markdown, project workflows",
    "section": "",
    "text": "This is the first footnote.↩︎\nThis is the second footnote.↩︎"
  },
  {
    "objectID": "lec02-base-r.html#lesson-preamble",
    "href": "lec02-base-r.html#lesson-preamble",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.1 Lesson Preamble",
    "text": "3.1 Lesson Preamble\n\n3.1.1 Learning Objectives\n\nDefine the following terms as they relate to R: call, function, arguments, options.\nDo simple arithmetic operations in R using values and objects.\nCall functions and use arguments to change their default options.\nUnderstand the logic and use of if else statements.\nDefine our own functions.\nCreate for and while loops.\nInspect the content of vectors and manipulate their content.\n\n3.1.2 Learning outline\n\nCreating objects/variables in R\nIf else statements\nUsing and writing functions\nVectors and data types\nSubsetting vectors\nMissing data\nLoops and vectorization\n\n\nNote: Parts of this lecture were originally created by combining contributions to Data Carpentry and has been modified to align with the aims of EEB313.\n\n\nprint(\"hello! today we are talking about vectors, functions, and the like.\")\n\n[1] \"hello! today we are talking about vectors, functions, and the like.\""
  },
  {
    "objectID": "lec02-base-r.html#clear-your-worksapce",
    "href": "lec02-base-r.html#clear-your-worksapce",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.2 Clear your worksapce",
    "text": "3.2 Clear your worksapce\nWhen using Rstudio, it is best practice to turn off automatic save and restore of global workspace. To do this, go to the “Tools” menu in Rstudio, select “Global Options”, and make sure the “Restore .RData into workspace at startup” box is not selected For good measure, set the “Save workspace to .RData on exit” to “Never”. The command to clear your workspace in a script is\n\nrm(list=ls())\n\nToday we will go through some R basics, including how to create objects, assign values, define functions, and use for and while loops to iteratively preform calculations."
  },
  {
    "objectID": "lec02-base-r.html#creating-objects-in-r",
    "href": "lec02-base-r.html#creating-objects-in-r",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.3 Creating objects in R",
    "text": "3.3 Creating objects in R\nAs we saw in our first class, you can get output from R simply by typing math in the console:\n\n3 + 5\n\n[1] 8\n\n12 / 7\n\n[1] 1.714286\n\n\nHowever, to do more complex calcualtions, we need to assign values to objects.\n\nx &lt;- 3\ny &lt;- x + 5\ny\n\n[1] 8\n\n\nYou can name an object in R almost anything you want:\n\njoel &lt;- 3\njoel + 5\n\n[1] 8\n\nTRUE &lt;- 3\n\nError in TRUE &lt;- 3: invalid (do_set) left-hand side to assignment\n\n### not allowed to overwrite logical operators\n\nT &lt;- 3 \n### for some reason this is allowed, but problematic\n### T and TRUE are often used interchangeably\n\nThere are some names that cannot be used because they are they are reserved for commands, operators, functions, etc. in base R (e.g., while, TRUE). See ?Reserved for a list these names. Even if it’s allowed, it’s best to not use names of functions that already exist in R (e.g., c, T, mean, data, df, weights). When in doubt, check the help or use tab completion to see if the name is already in use.\n\n3.3.0.1 Challenge\nWe have created two variables, joel and x. What is their sum? The sum of joel six times?\n\njoel + x\n\n[1] 6\n\njoel + joel + joel + joel + joel + joel\n\n[1] 18"
  },
  {
    "objectID": "lec02-base-r.html#some-tips-on-naming-objects",
    "href": "lec02-base-r.html#some-tips-on-naming-objects",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.4 Some tips on naming objects",
    "text": "3.4 Some tips on naming objects\n\nObjects can be given any name: x, current_temperature, thing, or subject_id.\nYou want your object names to be explicit and not too long.\nObject names cannot start with a number: x2 is valid, but 2x is not valid.\nR is also case sensitive: joel is different from Joel.\n\nIt is recommended to use nouns for variable names, and verbs for function names. It’s important to be consistent in the styling of your code (where you put spaces, how you name variables, etc.). Using a consistent coding style1 makes your code clearer to read for your future self and your collaborators. RStudio will format code for you if you highlight a section of code and press Ctrl/Cmd + Shift + a.\n\n3.4.1 Preforming calculations\nWhen assigning a value to an object, R does not print anything. You can force R to print the value by using parentheses or by typing the object name:\n\nweight_kg &lt;- 55    # doesn't print anything\n(weight_kg &lt;- 55)  # putting parentheses around the call prints the value of `weight_kg`\n\n[1] 55\n\nweight_kg          # and so does typing the name of the object\n\n[1] 55\n\n\nThe variable weight_kg is stored in the computer’s memory where R can access it, and we can start doing arithmetic with it efficiently. For instance, we may want to convert this weight into pounds:\n\n2.2 * weight_kg\n\n[1] 121\n\n\nWe can also change a variable’s value by assigning it a new one:\n\nweight_kg &lt;- 57.5\n2.2 * weight_kg\n\n[1] 126.5\n\n\nImportantly, assigning a value to one variable does not change the values of other variables. For example, let’s store the animal’s weight in pounds in a new variable, weight_lb:\n\nweight_lb &lt;- 2.2 * weight_kg\n\nand then change weight_kg to 100.\n\nweight_kg &lt;- 100\nweight_lb\n\n[1] 126.5\n\n\nNotice that weight_lb is unchanged.\n\n3.4.1.1 Challenge\nWhat are the values of these variables after each statement in the following?\n\nmass &lt;- 47.5\nage  &lt;- 122\nmass &lt;- mass * 2.0      \nage  &lt;- age - 20  \nmass_index &lt;- mass/age"
  },
  {
    "objectID": "lec02-base-r.html#functions-and-their-arguments",
    "href": "lec02-base-r.html#functions-and-their-arguments",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.5 Functions and their arguments!",
    "text": "3.5 Functions and their arguments!\nFunctions are sets of statements that are organized to preform certain tasks. They can be understood through analogy with cooking. Ingredients (called inputs or arguments) combine according to some set of reactions (the statements and commands of the function) to yield a product or output. A function does not have to return a number: a list of values could be returned, another function, or a list of functions.\nMany functions are built into R, including sqrt(). For sqrt(), the input must be a number larger than zero, and the value that is returned by the function is the square root of that number. Executing a function is called running or calling the function. An example of a function call is:\n\nsqrt(9)\n\n[1] 3\n\n# the input must be in the domain of the function:\nsqrt(\"hello\")\n\nError in sqrt(\"hello\"): non-numeric argument to mathematical function\n\nsqrt(-1) # note: sqrt() can take in *complex* numbers, including -1+0i\n\nWarning in sqrt(-1): NaNs produced\n\n\n[1] NaN\n\n\nThis is the same as assigning the value to a variable and then passing that variable to the function:\n\na &lt;- 9\nb &lt;- sqrt(a)\nb\n\n[1] 3\n\n\nHere, the value of a is given to the sqrt() function, the sqrt() function calculates the square root, and returns the value which is then assigned to variable b. This set up is important when you write more complex functions where multiple variables are passed to different arguments in different parts of a function.\nsqrt() is very simple because it takes just one argument. Arguments can be anything, not only numbers or files. Some functions take arguments which may either be specified by the user, or, if left out, take on a default value: these are called options. Options are typically used to alter the way the function operates, such as whether it ignores ‘bad values’, or what symbol to use in a plot. However, if you want something specific, you can specify a value of your choice which will be used instead of the default.\n\n3.5.1 Tab-completion\nTo access help about sqrt, tab-completion can be a useful tool. Type s and press Tab. You can see that R gives you suggestions of what functions and variables are available that start with the letter s, and thanks to RStudio they are formatted in this nice list. There are many suggestions here, so let’s be a bit more specific and append a q, to find what we want. If we press tab again, R will helpfully display all the available parameters for this function that we can pass an argument to.\n\n#s&lt;tab&gt;q\n#sqrt(&lt;tab&gt;)\n\nTo read the full help about sqrt, we can use the question mark, or type it directly into the help document browser.\n\n?sqrt\n\nAs you can see, sqrt() takes only one argument, x, which needs to be a numerical vector. Don’t worry too much about the fact that it says vector here; we will talk more about that later. Briefly, a numerical vector is one or more numbers. In R, every number is a vector, so you don’t have to do anything special to create a vector. More on vectors later!\nLet’s try a function that can take multiple arguments: round().\n\n#round(&lt;tab&gt;)\n?round\n\nIf we try round with a value:\n\nround(3.14159)\n\n[1] 3\n\n\nHere, we’ve called round() with just one argument, 3.14159, and it has returned the value 3. That’s because the default is to round to the nearest whole number, or integer. If we want more digits we can pass an argument to the digits parameter, to specify how many decimals we want to round to.\n\nround(3.14159, digits = 2)\n\n[1] 3.14\n\n\nAbove we have passed the argument 2 to the parameter digits. We can leave out the word digits since we know it comes as the second parameter, after x.\n\nround(3.14159, 2)\n\n[1] 3.14\n\n\nAs you notice, we have been leaving out x from the beginning. If you provide the names for both the arguments, we can switch their order:\n\nround(digits = 2, x = 3.14159)\n\n[1] 3.14\n\n\nIt’s good practice to put non-optional arguments before optional arguments, and to specify the names of all optional arguments. If you don’t, someone reading your code might have to look up the definition of a function with unfamiliar arguments to understand what you’re doing."
  },
  {
    "objectID": "lec02-base-r.html#if-else-statements",
    "href": "lec02-base-r.html#if-else-statements",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.6 If else statements",
    "text": "3.6 If else statements\nIt is often useful to preform calculations only when certain conditions are met. One way to do this is using an “if else” statement. The syntax of such a statement is below:\n\n# if (condition){\n#   computation\n# } else{ \n#   another computation\n# }\n\nWithout the else bit, the computation will be preformed if the condition is satisfied and nothing will be done (and variables in the environment will be unchanged) otherwise.\n\nt &lt;- 1\n\nt &lt; 10 # returns the truth value of this statement\n\n[1] TRUE\n\nt == 10\n\n[1] FALSE\n\nt &gt; 10\n\n[1] FALSE\n\nt &gt; 10 | t == 10\n\n[1] FALSE\n\n### &lt; (less than), &gt; (greater than), == (equals)\n### & (and), | (or), ! (not) are common logical operators\n\nif (t &lt; 10){\n  print(t)\n} else{\n  print(t-1)\n}\n\n[1] 1\n\n### setting t &lt;- 10 and executing the above returns 9\n\nIn fact, if else statements lend themselves naturally to deciding which of &gt;2 alternative computations should be preformed, based on a set of appropriate conditions. For example,\n\nt &lt;- 10\nt2 &lt;- 20\n\nif (t &lt; 10 & t2 &gt; 19){\n  print(\"1\")\n} else if (t &lt; 10 & t2 &gt; 19){\n  print(\"2\")\n} else if (t &lt;= 10 & t2 &gt; 19){\n  print(\"3\")\n}\n\n[1] \"3\"\n\n### notice how the third condition is met, but the others are not\n### when the first condition is met (even if the others are too), \"1\" is printed:\n\nif (t &lt;= 10 & t2 &gt; 19){\n  print(\"1\")\n} else if (t &lt;= 10 & t2 &gt; 19){\n  print(\"2\")\n} else if (t &lt;= 10 & t2 &gt; 19){\n  print(\"3\")\n}\n\n[1] \"1\""
  },
  {
    "objectID": "lec02-base-r.html#writing-functions",
    "href": "lec02-base-r.html#writing-functions",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.7 Writing functions",
    "text": "3.7 Writing functions\nWe have seen there are many built-in functions in R, which we will use throughout the semester: sum, c(), mean(), all(), plot(), ifelse(), print(). We can also write our own functions for custom use. For example, the below chuck defines two functions which check if two scalar inputs are positive.\n\ncheck_if_numbers_are_postive_function1 &lt;- function(num1, num2) {\n  if (num1 &gt; 0 & num2 &gt; 0){\n    return(\"both numbers are postive!\")\n  } else{\n    return(\"one or both numbers are not postive.\")\n  }\n}\n\ncheck_if_numbers_are_postive_function1(4, 5)\n\n[1] \"both numbers are postive!\"\n\ncheck_if_numbers_are_postive_function1(-4, 5)\n\n[1] \"one or both numbers are not postive.\"\n\ncheck_if_numbers_are_postive_function2 &lt;- function(num1, num2) {\n  if (num1 &gt; 0){\n    if (num2 &gt; 0){\n      return(\"both numbers are postive!\")\n    }\n  }\n}\n\ncheck_if_numbers_are_postive_function2(4, 5)\n\n[1] \"both numbers are postive!\"\n\ncheck_if_numbers_are_postive_function2(-4, 5)\n\nAlthough these functions agree when both inputs are positive (i.e., they return the same output), the second function does not return a statement indicating one or both of the inputs are non-positive when this is the case. This is because we have not indicated what should be returned when the condition in one or the other if the statement in check_if_numbers_are_postive_function2 is not met.\nWe can do this as follows:\n\ncheck_if_numbers_are_postive_function2 &lt;- function(num1, num2) {\n  \n  if (! num1 &gt; 0){\n    return(\"one or both numbers are not postive.\")\n  }\n  \n  if (num1 &gt; 0){\n    if (num2 &gt; 0){\n      return(\"both numbers are postive!\")\n    }\n     if (! num2 &gt; 0){\n      return(\"one or both numbers are not postive.\")\n    }\n  }\n  \n}\n\ncheck_if_numbers_are_postive_function2(4, 5)\n\n[1] \"both numbers are postive!\"\n\ncheck_if_numbers_are_postive_function2(-4, 5)\n\n[1] \"one or both numbers are not postive.\"\n\ncheck_if_numbers_are_postive_function2(4, -5)\n\n[1] \"one or both numbers are not postive.\"\n\n\nImportantly, these functions are not written with elegance in mind. There are better ways to check if two numbers are both positive. We encourage you to think more about how to write functions (like the above) with elegance and efficiency in mind, and how trade-offs between the two might come up.\n\n3.7.0.1 Challenge\nCan you write a function that calculates the mean of 3 numbers?\n\nmean_of_three_numbers &lt;- function(num1, num2, num3) {\n   my_sum &lt;- num1 + num2 + num3\n   my_mean &lt;- my_sum / 3\n   return(my_mean)\n}\nmean_of_three_numbers(2, 4, 6)\n\n[1] 4"
  },
  {
    "objectID": "lec02-base-r.html#vectors-and-data-types",
    "href": "lec02-base-r.html#vectors-and-data-types",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.8 Vectors and data types",
    "text": "3.8 Vectors and data types\nA vector is the most common data type in R, and is the workhorse of the language. A vector is composed of a series of values, which can be numbers (0, \\(\\pi\\), 72) or characters (“hello”, “I’m a ChaRaCTER”). We can assign a series of values to a vector using the c() function, which stands for concatenate. For example we can create a vector of animal weights and assign it to a new object weight_g:\n\nweight_g &lt;- c(50, 60, 65, 82) # concatenate values into a vector\nweight_g\n\n[1] 50 60 65 82\n\n\nYou can also use the command seq to create a sequence of numbers.\n\nseq(from = 0, to = 30) # default spacing is =1\n\n [1]  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\n[26] 25 26 27 28 29 30\n\nseq(from = 0, to = 30, by = 3) # returns every third number in c(0,1,2,...,30)\n\n [1]  0  3  6  9 12 15 18 21 24 27 30\n\n\nA vector can also contain characters (in addition to numbers):\n\nanimals &lt;- c('mouse', 'rat', 'dog')\nanimals\n\n[1] \"mouse\" \"rat\"   \"dog\"  \n\n\nThe quotes around “mouse”, “rat”, etc. are essential here and can be either single or double quotes. Without the quotes R will assume there are objects called mouse, rat and dog. As these objects don’t exist in R’s memory, there will be an error message.\nThere are many functions that allow you to inspect the content of a vector. length() tells you how many elements are in a particular vector:\n\nlength(weight_g)\n\n[1] 4\n\nlength(animals)\n\n[1] 3\n\n\nAn important feature of a vector is that all of the elements are the same type of data. The function class() indicates the class (the type of element) of an object:\n\nclass(weight_g)\n\n[1] \"numeric\"\n\nclass(animals)\n\n[1] \"character\"\n\n\nThe function str() provides an overview of the structure of an object and its elements. It is a useful function when working with large and complex objects:\n\nstr(weight_g)\n\n num [1:4] 50 60 65 82\n\nstr(animals)\n\n chr [1:3] \"mouse\" \"rat\" \"dog\"\n\n\nYou can use the c() function to add other elements to your vector:\n\nweight_g &lt;- c(weight_g, 90) # add to the end of the vector\nweight_g &lt;- c(30, weight_g) # add to the beginning of the vector\nweight_g\n\n[1] 30 50 60 65 82 90\n\n\nIn the first line, we take the original vector weight_g, add the value 90 to the end of it, and save the result back into weight_g. Then we add the value 30 to the beginning, again saving the result back into weight_g.\nWe can do this over and over again to grow a vector, or assemble a dataset. As we program, this may be useful to add results that we are collecting or calculating.\nAn atomic vector is the simplest R data type and it is a linear vector of a single type, e.g., all numbers. Above, we saw two of the six atomic vector types that R uses: \"character\" and \"numeric\" (or \"double\"). These are the basic building blocks that all R objects are built from.\nThe other four atomic vector types are:\n\n\"logical\" for TRUE and FALSE (the boolean data type)\n\"integer\" for integer numbers (e.g., 2L, the L indicates to R that it’s an integer)\n\"complex\" to represent complex numbers with real and imaginary parts (e.g., 1 + 4i).\n\"raw\" for bitstreams. We will not discuss this type further.\n\nVectors are one of the many data structures that R uses. Other important ones are lists (list), matrices (matrix), data frames (data.frame), factors (factor) and arrays (array). In this class, we will focus on data frames, which is most commonly used one for data analyses.\n\n3.8.0.1 Challenge\nWe’ve seen that atomic vectors can be of type character, numeric (or double), integer, and logical. What happens if we try to mix these types? Find out by using class to test these examples.\n\nnum_char &lt;- c(1, 2, 3, 'a')\nnum_logical &lt;- c(1, 2, 3, TRUE)\nchar_logical &lt;- c('a', 'b', 'c', TRUE)\ntricky &lt;- c(1, 2, 3, '4')\n\n\n# Answer\nclass(num_char)\n\n[1] \"character\"\n\nclass(num_logical)\n\n[1] \"numeric\"\n\nclass(char_logical)\n\n[1] \"character\"\n\nclass(tricky)\n\n[1] \"character\"\n\n\nThis happens because vectors can be of only one data type. Instead of throwing an error and saying that you are trying to mix different types in the same vector, R tries to convert (coerce) the content of this vector to find a “common denominator”. A logical can be turn into 1 or 0, and a number can be turned into a string/character representation. It would be difficult to do it the other way around: would 5 be TRUE or FALSE? What number would ‘t’ be? This establishes a hierarchy for conversions/coercions, whereby some types get preferentially coerced into other types. From the above example, we can see that the hierarchy goes logical -&gt; numeric -&gt; character, and logical can also be directly coerced into character."
  },
  {
    "objectID": "lec02-base-r.html#subsetting-vectors",
    "href": "lec02-base-r.html#subsetting-vectors",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.9 Subsetting vectors",
    "text": "3.9 Subsetting vectors\nIf we want to extract one or several values from a vector, we provide one or several indices in square brackets:\n\nanimals &lt;- c(\"mouse\", \"rat\", \"dog\", \"cat\")\nanimals[2]\n\n[1] \"rat\"\n\nanimals[c(3, 2)] # Provide multiple indices simultaneously\n\n[1] \"dog\" \"rat\"\n\n\nWe can also repeat the indices to create an object with more elements than the original one:\n\nmore_animals &lt;- animals[c(1, 2, 3, 2, 1, 4)]\nmore_animals\n\n[1] \"mouse\" \"rat\"   \"dog\"   \"rat\"   \"mouse\" \"cat\"  \n\n\nR indices start at 1. Programming languages like Fortran, MATLAB, Julia, and R start counting at 1, because that’s what human beings typically do. Languages in the C family (including C++, Java, Perl, and Python) start counting at 0.\n\n3.9.1 Conditional subsetting\nAnother common way of subsetting is by using a logical vector. TRUE will select the element with the same index, while FALSE will not:\n\nweight_g &lt;- c(21, 34, 39, 54, 55)\nweight_g[c(TRUE, FALSE, TRUE, TRUE, FALSE)]\n\n[1] 21 39 54\n\n\nTypically, these logical vectors are not typed by hand, but are the output of other functions or logical tests."
  },
  {
    "objectID": "lec02-base-r.html#na-na-na-na-na-na-missing-data",
    "href": "lec02-base-r.html#na-na-na-na-na-na-missing-data",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.10 NA NA NA NA NA NA… Missing data??",
    "text": "3.10 NA NA NA NA NA NA… Missing data??\nDue to its origins as a statistical computing language, R includes tools to deal with missing data easily. Missing data are represented in vectors as NA.\nImportantly, many built-in R functions will return NA if the data you are working with include missing values. This feature makes it harder to overlook the cases where you are dealing with missing data.\n\nheights &lt;- c(2, 4, 4, NA, 6)\nmean(heights)\n\n[1] NA\n\nmax(heights)\n\n[1] NA\n\n\nFor functions such as mean(), you can add the argument na.rm = TRUE to preform calculations ignoring the missing values:\n\nmean(heights, na.rm = TRUE)\n\n[1] 4\n\nmax(heights, na.rm = TRUE)\n\n[1] 6\n\n\nIt is also possible to use conditional subsetting to remove NAs. The function is.na() is helpful in this case. This function examines each element in a vector to see whether it is NA, and returns a logical vector.\n\nis.na(heights)\n\n[1] FALSE FALSE FALSE  TRUE FALSE\n\n\nCombining this function and ! (the logical operator not), we can extract elements that are not NAs:\n\n## Extract those elements which are not missing values.\nheights[!is.na(heights)]\n\n[1] 2 4 4 6\n\n\nAlternatively, we can use the these functions to achieve the same outcome.\n\n# Returns the object with incomplete cases removed. \nna.omit(heights)\n\n[1] 2 4 4 6\nattr(,\"na.action\")\n[1] 4\nattr(,\"class\")\n[1] \"omit\"\n\n# Extract those elements which are complete cases. \nheights[complete.cases(heights)]\n\n[1] 2 4 4 6\n\n\nImportant note: missing data are ubiquitous. Make sure you know why NAs exist in your data before removing them. If NAs are removed, document why and be sure to store the data pre- and post-processing."
  },
  {
    "objectID": "lec02-base-r.html#loops-and-vectorization",
    "href": "lec02-base-r.html#loops-and-vectorization",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "3.11 Loops and vectorization",
    "text": "3.11 Loops and vectorization\nLoops are essential in programming. They come in two types: for and while.\nThe syntax for a for loop is as follows:\n\n# for (iterator in values_iterator_can_assume){\n#   computation\n# }\n\nThe syntax for a while loop is as follows:\n\n# while (condition){\n#   computation\n# }\n\nThe key difference between these types of loop is that a while loop breaks when the condition fails to be met; the loop preforms calculations while the condition is met. A for loop preforms the computation for all values of the iterator in the list/vector/etc. of values specified in the “for” statement.\nThe below for loop prints the values in the vector the iterator num can assume (one by one):\n\nv &lt;- c(2, 4, 6, 8, 10)\nfor (num in v) {\n    print(num)\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nEquivalently, we could write\n\nfor (i in 1:5) {\n  print(v[i])\n}\n\n[1] 2\n[1] 4\n[1] 6\n[1] 8\n[1] 10\n\n\nThis set up is quite powerful. We can now perform tasks iteratively:\n\n# creates vector where each number is 3 more than the previous number:\n\nx &lt;- c(0.4)\n\nfor (i in 1:5) {\n  x[i+1] &lt;- x[i] + 3 \n}\n\nx\n\n[1]  0.4  3.4  6.4  9.4 12.4 15.4\n\n# calls sqrt() function from inside loop\n\nx &lt;- c(0.4)\n\nfor (i in 1:5) {\n  x[i+1] &lt;- sqrt(x[i])\n}\n\nx\n\n[1] 0.4000000 0.6324555 0.7952707 0.8917795 0.9443408 0.9717720\n\n\nTo constrast for and while loops, consider the following:\n\nx &lt;- 0.4\ni &lt;- 1\ny &lt;- c() ### need to declare y so that values can be added in below loop\n\nwhile (x &lt;= 0.9999) {\n  y[i] &lt;- x\n  x &lt;- sqrt(x)\n  i &lt;- i + 1 # updating i so that y can be updated in next step\n}\n\n### note we could just keep track of x if we:\n### 1) use the condition x[i] &lt;= 0.9999\n### 2) calculate the next term in the sequence of sqrts using x[i+1] &lt;- sqrt(x[i])\n\ny\n\n [1] 0.4000000 0.6324555 0.7952707 0.8917795 0.9443408 0.9717720 0.9857850\n [8] 0.9928670 0.9964271 0.9982120 0.9991056 0.9995527 0.9997763 0.9998882\n\n\nThe above loop returns the sequence of square roots \\(0.4, \\sqrt{0.4}, \\sqrt{\\sqrt{0.4}}, \\dots\\). Importantly, the loop terminates when an element of this sequence is greater than 0.9999. The number of iterations until this happens is not specified. This means while loops can run for infinite time if their conditions are never violated. It is best to have checks in place to make sure this doesn’t happen!"
  },
  {
    "objectID": "lec02-base-r.html#footnotes",
    "href": "lec02-base-r.html#footnotes",
    "title": "3  Assignments, vectors, functions, and loops",
    "section": "",
    "text": "Refer to the tidy style guide for which style to adhere to.↩︎"
  },
  {
    "objectID": "lec03-dataframes-dplyr.html#lesson-preamble",
    "href": "lec03-dataframes-dplyr.html#lesson-preamble",
    "title": "4  Dataframes and Introduction to Data Wrangling",
    "section": "4.1 Lesson Preamble",
    "text": "4.1 Lesson Preamble\n\n4.1.1 Learning Objectives\n\nDescribe what a data frame is.\nLoad external data from a .csv file into a data frame in R.\nSummarize the contents of a data frame in R.\nUnderstand the purpose of the dplyr package.\n\n4.1.2 Lecture outline\n\nR packages for data analyses (20 mins)\nData set background (10 mins)\nWhat are data frames (10 mins)\nIntroduction to data and wrangling (40 mins)"
  },
  {
    "objectID": "lec03-dataframes-dplyr.html#setting-up-the-workspace",
    "href": "lec03-dataframes-dplyr.html#setting-up-the-workspace",
    "title": "4  Dataframes and Introduction to Data Wrangling",
    "section": "4.2 Setting up the workspace",
    "text": "4.2 Setting up the workspace\nOne of the keys to a successful R working session is to make sure you have everything you need ready to go, and neatly organized. Just like when you are cooking or baking, having everything pre-measured and organized in neat way can be so helpful to ensure efficient, no fuss, and nice dishes in the end.\nNow we’ll take another couple of minutes to get our R workspace ready.\n\n4.2.1 Set up your Notebook\nFirst, we are going to set up our Notebook.\n---\ntitle: Introduction to R\n---\nRecall that this header block is called the YAML header. This is optional, without this your document will still knit, but this is useful for fine-tuning the output of your document, such as font size, figure sizes, and generating a table of content. We will mostly be using it to give our documents nice headers. If you are interested in playing with other customizations options the YAML provides, check out this guide.\n\n\n4.2.2 Check your directory\nOk, now the Notebook is ready. Next, we want to make sure we are working out of the correct directory, which is a fancy way to say the folder that we will be reading files from, and saving files to.\nBy default, R works out of your Documents folder. We can check this with the following function getwd(), which stands for get working directory.\n\ngetwd()\n\nIf this is the folder you wish to work out of, then we are good to go. If not, then we need to redirect R to some place else. Normally, in an R Script, you would do so by using the function setwd() (set working directory). In R Notebook, this is a slightly more involved process, because you cannot just quickly switch directories with setwd(). The reason for this is because R is trying to be helpful making sure you don’t lose your files half way through a script when you switch folders. In order to change directories in R Notebook, we have to reach all the way in and change the root directory in a special “setup code chunk”. To make this setup code chunk, add the words setup after r in your code chunk header.\n\n\nThe setup code chunk must NOT contain any commands other than the setup options you wish to change.\nWe then need to find the path to the folder we want R to work out of. In PC, right-click on the desired folder, and you can find its location under the General tab. In Mac, right-click on the desired folder and choose Get Info to find it’s location.\n\n# For PC (remember to change forward-slash to back-slash):\n# knitr::opts_knit$set(root.dir = \"C:/Users/Documents/UofT/eeb313\")\n\n# For Mac (can get away with using ~ as short hand):\n# knitr::opts_knit$set(root.dir = \"~/Documents/UofT/eeb313\")\n\ngetwd()\n\nHowever, remember last week when we talked about relative file paths? The functions to set your working directory is slowly becoming outdated as project-oriented workflows become the norm.\nEach R script or .Rmd report should contain a call to here::i_am('path/to/this/file') at the top to establish the root directory.\nSubsequent file paths can be made using the here function. You should also be saving your files and plots by using the here() function. More on that later.\n\nlibrary(here)\nhere()\n\n# use to set \"lectures\" as working directory\n# here::i_am(\"lectures\", \"lec03-dataframes-dplyr.Rmd\")\n\nOne important distinction from the working directory is that this remains stable even if the working directory is changed. I recommend that you steer clear from ever changing the working directory.\n\n\n4.2.3 Load your packages\nNext, we want to check to see that all of our required packages are properly loaded and ready to go.\nIn a nutshell, packages are bundles of functions that perform related tasks (like a book of recipes). Our installation of R comes with some packages already, since they are considered critical for using R, e.g., c(), mean(), +, -, etc. These pre-installed packages and function are commonly collectively referred to as base R.\nIn addition to these foundational packages and functions, CRAN (Comprehensive R Archive Network), the official repository for R-packages, houses thousands more packages. There is literally a package for every occasion you can and cannot imagine. Did you know that you can call an Uber from R (ubeR)? How about, instead of boring dots as data points in figures, you can plot emojis (emojifont)? Frustrated with code and need a pick-me-up? The packages praise1 and kittyR2 got you covered! All of this is possible due to R being an open language, and many people generously contribute their time to its development.\nThese additionally packages are not installed by default, because then base R installation would be huge and most people would only be using a fraction of everything installed on their machine. It would be like if you downloaded the Firefox or Chrome browser and you would get all extensions and add-ons installed by default, or as if your phone came with every app ever made for it already installed when you bought it: quite impractical.\nTo install a package in R, we use the function install.packages(). Think of this function as downloading the package to your machine - you only need to do this once.\n\ninstall.packages('tidyverse') # This is a chonky package, takes a while to download\n\ntidyverse3 is a conglomerate package that is a collection of packages that has similar functions, just like Microsoft Word is part of Microsoft Office. tidyverse, as its name may suggest, contains many packages that makes data cleaning and exploring more intuitive and effective. It is basically an entire philosophy on how to handle data and has a massive following.\nThe two tidyverse packages we will be using the most frequently in this course is dplyr and ggplot2. dplyr is great for data wrangling (Lecture 2) and ggplot2 makes killer plots (Lecture 3).\nTo use functions in the dplyr package, type dplyr:: and then the function name.\n\ndplyr::glimpse(cars) \n\nRows: 50\nColumns: 2\n$ speed &lt;dbl&gt; 4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13…\n$ dist  &lt;dbl&gt; 2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34…\n\n# `glimpse` gives us a glimpse... of an object\n# `cars` is a base R dataset\n\nSince we will be using this package a lot, it would be a little annoying to have to type dplyr:: every time. We can bypass this step by loading the package into our current environment. Think of this is “opening” the package for your work session.\n\nlibrary(tidyverse) # More convenient to load all tidy packages at once\n\nWarning: package 'tidyverse' was built under R version 4.1.2\n\n\nWarning: package 'tibble' was built under R version 4.1.2\n\n\nWarning: package 'tidyr' was built under R version 4.1.2\n\n\nWarning: package 'readr' was built under R version 4.1.2\n\n\nWarning: package 'dplyr' was built under R version 4.1.2\n\n\nWarning: package 'stringr' was built under R version 4.1.2\n\n\nWarning: package 'forcats' was built under R version 4.1.2\n\n\nWarning: package 'lubridate' was built under R version 4.1.2\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nglimpse(cars)\n\nRows: 50\nColumns: 2\n$ speed &lt;dbl&gt; 4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13…\n$ dist  &lt;dbl&gt; 2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34…\n\n\nThis needs to be done once for every new R session, and so it is common practice to keep a list of all the packages used at the top of your script or notebook for convenience and load all of it at start up.\nThat’s a lot of red though! What are these warning signs and checks?\nAll the warning signs indicate are the version of R that they were built under. They can frequently be ignored unless your version of R is so old that the packages can no longer be run on R! Note that packages are frequently updated, and functions may become deprecated.\nNext, the warning shows you all the packages that were successfully installed.\nFinally, there are some conflicts! All this means is that there are multiple functions with the same name that may do different things. R prioritizes functions from certain packages over others. So, in this case, the filter() function from dplyr will take precedent over the filter() function from the stats package. If you want to use the latter, use double colons :: to indicate that you are calling a function from a certain package:\n\nstats::filter()\n\n\n4.2.3.1 An Aside on Reproducible Environments\nAt this point, you are already living a project-centric lifestyle. With renv, you’ll start using project libraries, giving each project its own independent collection of packages. To increase reproducibility of a project, we must keep track of what packages are used. This also helps us avoid error messages if we update R or update a package, and things no longer work.\nTo convert a project to use renv, call renv::init(). It adds three new files and directories to your project. Make sure you indicate where your project lives by using here()\n\n# install.packages(\"renv\")\nlibrary(renv)\nrenv::init(here())\n\nThat’s a lot of output! What does it mean?\nYou should now see lockfile, project_name/renv.lock. This lockfile records all of the information about packages needed by your project, such as the version of package and where was it installed from. It knows all this because renv scans all files in your project directory, and looks for functions like library, require, or package::function.\nWe also see project_name/.Rprofile, containing one line. When R starts, it searches for .Rprofile and runs what it finds. We can use this file to change various options.\nYou will also see a folder project_name/renv/, which contains your project library. If you already have a package installed elsewhere, renv will link to it. Otherwise, it’ll be installed in renv/library.\nEssentially, whenever we open our project, we activate our R environment using these three files. renv will automatically be active in any R session that is run from the project directory. To activate\n\nactivate(here())\n\n# or use\nknitr::opts_knit$set(root.dir = here())\n\nNow, every time you open your project, run restore() in order to start from where you left off!\n\nrestore()\n\nIf you are adding new packages that you require to your code, uses snapshot() to record changes to the renv.lock file. This function captures the state of your project at that point in time.\n\nsnapshot()\n\nTo summarize, the general workflow[^1] when working with renv is:\n\nCall renv::init() to initialize a new project-local environment with a private R library. Work in the project as normal, installing and removing new R packages as they are needed in the project.\nCall renv::snapshot() to save the state of the project library to the lockfile (called renv.lock). Continue working on your project, installing and updating R packages as needed.\nCall renv::snapshot() again to save the state of your project library if your attempts to update R packages were successful, or call renv::restore() to revert to the previous state as encoded in the lockfile if your attempts to update packages introduced some new problems.\n\n[^1] Material taken from Posit.\nThe last thing required for reproducibility is a version control system, like Git and GitHub. That lecture will be coming later on in the semester!\n\n\n\n4.2.4 Load your data\nJust a moment ago we took a glimpse of the dataset cars, which is one of the datasets that came with R. Now we are going to try loading our own data.\nWe will be working with real data from a longitudinal study of the species abundance in the Chihuahuan desert ecosystem near Portal, Arizona, USA. This study includes observations of plants, ants, and rodents from 1977 - 2002, and has been used in over 100 publications. More information is available in the abstract of this paper from 2009. There are several datasets available related to this study, and we will be working with datasets that have been preprocessed by Data Carpentry to facilitate teaching. These are made available online as The Portal Project Teaching Database, both at the Data Carpentry website, and on Figshare. Figshare is a great place to publish data, code, figures, and more openly to make them available for other researchers and to communicate findings that are not part of a longer paper.\nWe are studying the species and weight of animals caught in plots in our study area. The dataset is stored as a comma separated value (CSV) file. Each row holds information for a single animal, and the columns represent:\n\n\n\nColumn\nDescription\n\n\n\n\nrecord_id\nunique id for the observation\n\n\nmonth\nmonth of observation\n\n\nday\nday of observation\n\n\nyear\nyear of observation\n\n\nplot_id\nID of a particular plot\n\n\nspecies_id\n2-letter code\n\n\nsex\nsex of animal (“M”, “F”)\n\n\nhindfoot_length\nlength of the hindfoot in mm\n\n\nweight\nweight of the animal in grams\n\n\ngenus\ngenus of animal\n\n\nspecies\nspecies of animal\n\n\ntaxa\ne.g. rodent, reptile, bird, rabbit\n\n\nplot_type\ntype of plot\n\n\n\nTo read data into R, we are going to use a function called read_csv. One useful option that read_csv includes is the ability to read a CSV file directly from a URL, without downloading it in a separate step:\n\nlibrary(readr)\nsurveys &lt;- read_csv('https://ndownloader.figshare.com/files/2292169')\n\nRows: 34786 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): species_id, sex, genus, species, taxa, plot_type\ndbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nHowever, it is often a good idea to download the data first, so you have a copy stored locally on your computer in case you want to do some offline analyses, or the online version of the file changes or the file is taken down. You can either download the data manually or from within R:\n\ndownload.file(\"https://ndownloader.figshare.com/files/2292169\",\n              \"portal_data.csv\")\n# Saves file to current or root directory with this name\n# You can use `here()` to indicate sublevels in your directory\n\nThe data is read in by specifying its file name. R knows to look in your current directory for something with this name (don’t forget the quotation marks).\n\nsurveys &lt;- read_csv(\"portal_data.csv\")\n\nRows: 34786 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): species_id, sex, genus, species, taxa, plot_type\ndbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s have a look at this dataset.\n\nsurveys\n\n# A tibble: 34,786 × 13\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2        72     8    19  1977       2 NL         M                  31     NA\n 3       224     9    13  1977       2 NL         &lt;NA&gt;               NA     NA\n 4       266    10    16  1977       2 NL         &lt;NA&gt;               NA     NA\n 5       349    11    12  1977       2 NL         &lt;NA&gt;               NA     NA\n 6       363    11    12  1977       2 NL         &lt;NA&gt;               NA     NA\n 7       435    12    10  1977       2 NL         &lt;NA&gt;               NA     NA\n 8       506     1     8  1978       2 NL         &lt;NA&gt;               NA     NA\n 9       588     2    18  1978       2 NL         M                  NA    218\n10       661     3    11  1978       2 NL         &lt;NA&gt;               NA     NA\n# ℹ 34,776 more rows\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nThis displays a nice tabular view of the data, which also includes pagination; there are many rows and we can click the arrow to view all the columns. Technically, this object is actually a tibble rather than a data frame, as indicated in the output. The reason for this is that read_csv automatically converts the data into to a tibble when loading it. Since a tibble is just a data frame with some convenient extra functionality, we will use these words interchangeably from now on.\nIf we just want to glance at how the data frame looks, it is sufficient to display only the top (the first 6 lines) using the function head():\n\nhead(surveys)\n\n# A tibble: 6 × 13\n  record_id month   day  year plot_id species_id sex   hindfoot_length weight\n      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n1         1     7    16  1977       2 NL         M                  32     NA\n2        72     8    19  1977       2 NL         M                  31     NA\n3       224     9    13  1977       2 NL         &lt;NA&gt;               NA     NA\n4       266    10    16  1977       2 NL         &lt;NA&gt;               NA     NA\n5       349    11    12  1977       2 NL         &lt;NA&gt;               NA     NA\n6       363    11    12  1977       2 NL         &lt;NA&gt;               NA     NA\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nAwesome! Everything is set, and now we are finally ready to start working with real data in R!"
  },
  {
    "objectID": "lec03-dataframes-dplyr.html#what-are-data-frames",
    "href": "lec03-dataframes-dplyr.html#what-are-data-frames",
    "title": "4  Dataframes and Introduction to Data Wrangling",
    "section": "4.3 What are data frames?",
    "text": "4.3 What are data frames?\nData frames are the de facto data structure for most tabular data, and what we use for statistics and plotting. A data frame can be created by hand, but most commonly they are generated by the function read_csv(); in other words, when importing spreadsheets from your hard drive (or the web).\nA data frame is a representation of data in the format of a table where the columns are vectors that all have the same length. Because the columns are vectors, each column contain the same type of data (e.g., characters, integers, factors). We can see this when inspecting the structure of a data frame with the function str() (structure):\n\nstr(surveys)\n\nspc_tbl_ [34,786 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ record_id      : num [1:34786] 1 72 224 266 349 363 435 506 588 661 ...\n $ month          : num [1:34786] 7 8 9 10 11 11 12 1 2 3 ...\n $ day            : num [1:34786] 16 19 13 16 12 12 10 8 18 11 ...\n $ year           : num [1:34786] 1977 1977 1977 1977 1977 ...\n $ plot_id        : num [1:34786] 2 2 2 2 2 2 2 2 2 2 ...\n $ species_id     : chr [1:34786] \"NL\" \"NL\" \"NL\" \"NL\" ...\n $ sex            : chr [1:34786] \"M\" \"M\" NA NA ...\n $ hindfoot_length: num [1:34786] 32 31 NA NA NA NA NA NA NA NA ...\n $ weight         : num [1:34786] NA NA NA NA NA NA NA NA 218 NA ...\n $ genus          : chr [1:34786] \"Neotoma\" \"Neotoma\" \"Neotoma\" \"Neotoma\" ...\n $ species        : chr [1:34786] \"albigula\" \"albigula\" \"albigula\" \"albigula\" ...\n $ taxa           : chr [1:34786] \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n $ plot_type      : chr [1:34786] \"Control\" \"Control\" \"Control\" \"Control\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   record_id = col_double(),\n  ..   month = col_double(),\n  ..   day = col_double(),\n  ..   year = col_double(),\n  ..   plot_id = col_double(),\n  ..   species_id = col_character(),\n  ..   sex = col_character(),\n  ..   hindfoot_length = col_double(),\n  ..   weight = col_double(),\n  ..   genus = col_character(),\n  ..   species = col_character(),\n  ..   taxa = col_character(),\n  ..   plot_type = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nInteger refers to a whole number, such as 1, 2, 3, 4, etc. Numbers with decimals, 1.0, 2.4, 3.333, are referred to as floats. Factors are used to represent categorical data. Factors can be ordered or unordered, and understanding them is necessary for statistical analysis and for plotting. Factors are stored as integers, and have labels (text) associated with these unique integers. While factors look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings.\n\n4.3.1 Inspecting data.frame objects\nWe already saw how the functions head() and str() can be useful to check the content and the structure of a data frame. Here is a non-exhaustive list of functions to get a sense of the content/structure of the data. Let’s try them out!\n\nSize:\n\ndim(surveys) - returns a vector with the number of rows in the first element and the number of columns as the second element (the dimensions of the object)\nnrow(surveys) - returns the number of rows\nncol(surveys) - returns the number of columns\n\nContent:\n\nhead(surveys) - shows the first 6 rows\ntail(surveys) - shows the last 6 rows\n\nNames:\n\nnames(surveys) - returns the column names (synonym of colnames() for data.frame objects)\nrownames(surveys) - returns the row names\n\nSummary:\n\nstr(surveys) - structure of the object and information about the class, length, and content of each column\nsummary(surveys) - summary statistics for each column\n\n\nNote: most of these functions are “generic”, they can be used on other types of objects besides data.frame.\n\n4.3.1.1 Challenge\nBased on the output of str(surveys), can you answer the following questions?\n\nWhat is the class of the object surveys?\nHow many rows and how many columns are in this object?\nHow many species have been recorded during these surveys?\n\n\n\n\n4.3.2 Indexing and subsetting data frames\nOur survey data frame has rows and columns (that is, it has 2 dimensions). If we want to extract some specific data from it, we need to specify the “coordinates” we want from it in a manner similar to when we indexed vectors. Row numbers come first, followed by column numbers. When indexing, base R data frames return a different format depending on how we index the data (i.e., either a vector or a data frame), but with enhanced data frames, tibbles, the returned object is almost always a data frame.\n\nsurveys[1, 1]   # First element in the first column of the data frame\n\n# A tibble: 1 × 1\n  record_id\n      &lt;dbl&gt;\n1         1\n\nsurveys[1, 6]   # First element in the 6th column\n\n# A tibble: 1 × 1\n  species_id\n  &lt;chr&gt;     \n1 NL        \n\nsurveys[, 1]    # First column in the data frame\n\n# A tibble: 34,786 × 1\n   record_id\n       &lt;dbl&gt;\n 1         1\n 2        72\n 3       224\n 4       266\n 5       349\n 6       363\n 7       435\n 8       506\n 9       588\n10       661\n# ℹ 34,776 more rows\n\nsurveys[1]      # First column in the data frame\n\n# A tibble: 34,786 × 1\n   record_id\n       &lt;dbl&gt;\n 1         1\n 2        72\n 3       224\n 4       266\n 5       349\n 6       363\n 7       435\n 8       506\n 9       588\n10       661\n# ℹ 34,776 more rows\n\nsurveys[1:3, 7] # First three elements in the 7th column\n\n# A tibble: 3 × 1\n  sex  \n  &lt;chr&gt;\n1 M    \n2 M    \n3 &lt;NA&gt; \n\nsurveys[3, ]    # The 3rd element for all columns\n\n# A tibble: 1 × 13\n  record_id month   day  year plot_id species_id sex   hindfoot_length weight\n      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n1       224     9    13  1977       2 NL         &lt;NA&gt;               NA     NA\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\nsurveys[1:6, ]  # Equivalent to head(surveys)\n\n# A tibble: 6 × 13\n  record_id month   day  year plot_id species_id sex   hindfoot_length weight\n      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n1         1     7    16  1977       2 NL         M                  32     NA\n2        72     8    19  1977       2 NL         M                  31     NA\n3       224     9    13  1977       2 NL         &lt;NA&gt;               NA     NA\n4       266    10    16  1977       2 NL         &lt;NA&gt;               NA     NA\n5       349    11    12  1977       2 NL         &lt;NA&gt;               NA     NA\n6       363    11    12  1977       2 NL         &lt;NA&gt;               NA     NA\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nYou can also exclude certain parts of a data frame using the “-” sign:\n\nsurveys[,-1]    # All columns, except the first\n\n# A tibble: 34,786 × 12\n   month   day  year plot_id species_id sex   hindfoot_length weight genus  \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  \n 1     7    16  1977       2 NL         M                  32     NA Neotoma\n 2     8    19  1977       2 NL         M                  31     NA Neotoma\n 3     9    13  1977       2 NL         &lt;NA&gt;               NA     NA Neotoma\n 4    10    16  1977       2 NL         &lt;NA&gt;               NA     NA Neotoma\n 5    11    12  1977       2 NL         &lt;NA&gt;               NA     NA Neotoma\n 6    11    12  1977       2 NL         &lt;NA&gt;               NA     NA Neotoma\n 7    12    10  1977       2 NL         &lt;NA&gt;               NA     NA Neotoma\n 8     1     8  1978       2 NL         &lt;NA&gt;               NA     NA Neotoma\n 9     2    18  1978       2 NL         M                  NA    218 Neotoma\n10     3    11  1978       2 NL         &lt;NA&gt;               NA     NA Neotoma\n# ℹ 34,776 more rows\n# ℹ 3 more variables: species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\nsurveys[-c(7:34786),] # Equivalent to head(surveys)\n\n# A tibble: 6 × 13\n  record_id month   day  year plot_id species_id sex   hindfoot_length weight\n      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n1         1     7    16  1977       2 NL         M                  32     NA\n2        72     8    19  1977       2 NL         M                  31     NA\n3       224     9    13  1977       2 NL         &lt;NA&gt;               NA     NA\n4       266    10    16  1977       2 NL         &lt;NA&gt;               NA     NA\n5       349    11    12  1977       2 NL         &lt;NA&gt;               NA     NA\n6       363    11    12  1977       2 NL         &lt;NA&gt;               NA     NA\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nIn addition to using numeric values to subset a data.frame (or matrix), columns can be called by name, using the following notations:\n\n# Only printing the first six rows as a demonstration\n\nsurveys[1:6, \"species_id\"] # Result is a data.frame\n\n# A tibble: 6 × 1\n  species_id\n  &lt;chr&gt;     \n1 NL        \n2 NL        \n3 NL        \n4 NL        \n5 NL        \n6 NL        \n\nhead(surveys$species_id) # Result is a vector\n\n[1] \"NL\" \"NL\" \"NL\" \"NL\" \"NL\" \"NL\"\n\n\n\n4.3.2.1 Challenge\n\nCreate a data.frame (surveys_200) containing only the observations from row 200 of the surveys dataset.\nNotice how nrow() gave you the number of rows in a data.frame?\n\nUse that number to pull out just that last row in the data frame.\nCompare that with what you see as the last row using tail() to make sure it’s meeting expectations.\nPull out that last row using nrow() instead of the row number.\nCreate a new data frame object (surveys_last) from that last row.\n\nUse nrow() to extract the row that is in the middle of the data frame. Store the content of this row in an object named surveys_middle.\nCombine nrow() with the - notation above to reproduce the behavior of head(surveys) keeping just the first through 6th rows of the surveys dataset."
  },
  {
    "objectID": "lec03-dataframes-dplyr.html#working-with-a-subset-of-the-data",
    "href": "lec03-dataframes-dplyr.html#working-with-a-subset-of-the-data",
    "title": "4  Dataframes and Introduction to Data Wrangling",
    "section": "4.4 Working with a subset of the data",
    "text": "4.4 Working with a subset of the data\nSometimes when we are working with a big dataset, we might want to test our code on a smaller portion of the data first to make sure it works before running the code on the entire thing, which could take a long time. There are many ways to subset your data. Common practices include pulling a random number of samples from the full dataset or take the first n rows of your dataset. Here, we take every 8th row from the dataset to work with for the rest of the lecture. This ensures that everybody is working with the same dataset (we don’t want to randomize) and we also have a good representation of observations from different plot types (the first 5000 rows only captured two out of a total of five plot types). Think about these issues when you create your own test data set.\nWhen you work on your own projects, don’t forget to go back to the full data set for your final, official analysis!!!\n\nstr(surveys)\n\nspc_tbl_ [34,786 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ record_id      : num [1:34786] 1 72 224 266 349 363 435 506 588 661 ...\n $ month          : num [1:34786] 7 8 9 10 11 11 12 1 2 3 ...\n $ day            : num [1:34786] 16 19 13 16 12 12 10 8 18 11 ...\n $ year           : num [1:34786] 1977 1977 1977 1977 1977 ...\n $ plot_id        : num [1:34786] 2 2 2 2 2 2 2 2 2 2 ...\n $ species_id     : chr [1:34786] \"NL\" \"NL\" \"NL\" \"NL\" ...\n $ sex            : chr [1:34786] \"M\" \"M\" NA NA ...\n $ hindfoot_length: num [1:34786] 32 31 NA NA NA NA NA NA NA NA ...\n $ weight         : num [1:34786] NA NA NA NA NA NA NA NA 218 NA ...\n $ genus          : chr [1:34786] \"Neotoma\" \"Neotoma\" \"Neotoma\" \"Neotoma\" ...\n $ species        : chr [1:34786] \"albigula\" \"albigula\" \"albigula\" \"albigula\" ...\n $ taxa           : chr [1:34786] \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n $ plot_type      : chr [1:34786] \"Control\" \"Control\" \"Control\" \"Control\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   record_id = col_double(),\n  ..   month = col_double(),\n  ..   day = col_double(),\n  ..   year = col_double(),\n  ..   plot_id = col_double(),\n  ..   species_id = col_character(),\n  ..   sex = col_character(),\n  ..   hindfoot_length = col_double(),\n  ..   weight = col_double(),\n  ..   genus = col_character(),\n  ..   species = col_character(),\n  ..   taxa = col_character(),\n  ..   plot_type = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsurveys_subset&lt;- surveys[seq(1, 34786, 8), ]\nstr(surveys_subset)\n\ntibble [4,349 × 13] (S3: tbl_df/tbl/data.frame)\n $ record_id      : num [1:4349] 1 588 1453 3000 5558 ...\n $ month          : num [1:4349] 7 2 11 5 3 8 11 9 12 9 ...\n $ day            : num [1:4349] 16 18 5 18 29 16 13 30 8 7 ...\n $ year           : num [1:4349] 1977 1978 1978 1980 1982 ...\n $ plot_id        : num [1:4349] 2 2 2 2 2 2 2 2 2 2 ...\n $ species_id     : chr [1:4349] \"NL\" \"NL\" \"NL\" \"NL\" ...\n $ sex            : chr [1:4349] \"M\" \"M\" \"M\" \"F\" ...\n $ hindfoot_length: num [1:4349] 32 NA NA 31 33 33 32 32 32 32 ...\n $ weight         : num [1:4349] NA 218 218 87 211 152 158 173 160 135 ...\n $ genus          : chr [1:4349] \"Neotoma\" \"Neotoma\" \"Neotoma\" \"Neotoma\" ...\n $ species        : chr [1:4349] \"albigula\" \"albigula\" \"albigula\" \"albigula\" ...\n $ taxa           : chr [1:4349] \"Rodent\" \"Rodent\" \"Rodent\" \"Rodent\" ...\n $ plot_type      : chr [1:4349] \"Control\" \"Control\" \"Control\" \"Control\" ..."
  },
  {
    "objectID": "lec03-dataframes-dplyr.html#exporting-data",
    "href": "lec03-dataframes-dplyr.html#exporting-data",
    "title": "4  Dataframes and Introduction to Data Wrangling",
    "section": "4.5 Exporting data",
    "text": "4.5 Exporting data\nAs you begin to play with your raw data, you may want to export these new, processed, datasets to share them with your collaborators or for archival.\nSimilar to the read_csv() function used for reading CSV files into R, there is a write_csv() function that generates CSV files from data frames.\nBefore using write_csv(), we are going to create a new folder, data-processed, in our working directory that will store this generated dataset. We don’t want to store manipulated datasets in the same directory as our raw data. It’s good practice to keep them separate. The raw data would ideally be put in a data-raw folder, which should only contain the raw, unaltered data, and should be left alone to make sure we don’t delete or modify it from how it was when we downloaded or recorded it ourself. Keep good notes on this original data, e.g., when did you download it and which links were used.\nManually create a new folder called “data-processed” in your directory. Alternatively, get R to help you with it. Remember to make sure that we are in the correct relative file directory!\n\nhere()\n\ndir.create(here(\"1_lectures\", \"processed_data\"))\n\nSave the new dataset to a directory where you will be able to access it for next class. There are a couple ways you could do this depending on which function you use. The function write_csv exists in the readr package, while write.csv is from base R. These two functions have slightly different arguments. Or, you can use save from base, which writes the R object into a specific file format.\n\nwrite_csv(surveys_subset,\n          file = here(\"survey_subset.csv\"))\n\n# If that fails you can always go back to base R! \nwrite.csv(surveys_subset,\n          file = here(\"survey_subset.csv\"))\n\nsave(surveys_subset, file = here(\"survey_subset.csv\"))\n\nWe are going to prepare a cleaned up version of the data without NAs.\n\n# Note that this omits observations with NA in *any* column.\n# There is no way to control which columns to use.\nsurveys_complete_naomit &lt;- na.omit(surveys)\n\n# Compare the dimensions of the original and the cleaned data frame\ndim(surveys)\n\n[1] 34786    13\n\ndim(surveys_complete_naomit)\n\n[1] 30676    13\n\n\nNow that our dataset is ready, we can save it as a CSV file in our Processed data folder.\n\n# To save to newly created directory\nwrite_csv(surveys_complete_naomit, here(\"surveys_complete_naomit.csv\"))"
  },
  {
    "objectID": "lec03-dataframes-dplyr.html#data-wrangling-with-dplyr",
    "href": "lec03-dataframes-dplyr.html#data-wrangling-with-dplyr",
    "title": "4  Dataframes and Introduction to Data Wrangling",
    "section": "4.6 Data wrangling with dplyr",
    "text": "4.6 Data wrangling with dplyr\nWrangling here is used in the sense of maneuvering, managing, controlling, cleaning, and turning your data upside down and inside out to look at it from different angles in order to understand it and prepare it for analyses. The package dplyr provides easy tools for the most common data manipulation tasks. It is built to work directly with data frames, with many common tasks optimized by being written in a compiled language (C++), which means that many operations run much faster than similar tools in R. An additional feature is the ability to work directly with data stored in an external database, such as SQL-databases. The ability to work with databases is great because you are able to work with much bigger datasets (100s of GB) than your computer could normally handle. We will not talk in detail about this in class, but there are great resources online to learn more (e.g., this lecture from Data Carpentry).\n\n4.6.1 Coercing as factors\nNotice for the sex of the observations, the summary is returning that there are characters in this column but not much else. Let’s take a look at the data in this column closer. Again, previous function parameters have words read in as characters but recent defaults have changed to read words in as factors.\nAs a column of character values, the relationship between the observations being recorded as “M”, or “F” are not being recognized. We will need convert this column to factor.\nLet’s overwrite the column in the original dataset. Remember, there is no undo button in programming. Double check your work before you overwrite objects\n\nsurveys_subset$sex &lt;- as.factor(surveys_subset$sex)\n\n\n\n4.6.2 Renaming columns in a dataframe\nFirst, let’s check out our surveys_subset dataframe.\n\nsurveys_subset\n\n# A tibble: 4,349 × 13\n   record_id month   day  year plot_id species_id sex   hindfoot_length weight\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;fct&gt;           &lt;dbl&gt;  &lt;dbl&gt;\n 1         1     7    16  1977       2 NL         M                  32     NA\n 2       588     2    18  1978       2 NL         M                  NA    218\n 3      1453    11     5  1978       2 NL         M                  NA    218\n 4      3000     5    18  1980       2 NL         F                  31     87\n 5      5558     3    29  1982       2 NL         M                  33    211\n 6      6500     8    16  1982       2 NL         F                  33    152\n 7      8657    11    13  1983       2 NL         F                  32    158\n 8      9605     9    30  1984       2 NL         F                  32    173\n 9     11215    12     8  1985       2 NL         F                  32    160\n10     11879     9     7  1986       2 NL         F                  32    135\n# ℹ 4,339 more rows\n# ℹ 4 more variables: genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;, plot_type &lt;chr&gt;\n\n\nThis dataframe contains hindfoot length and weight data of several species in different taxanomic groups. While we were collecting data, we notice that we didn’t write down the units in our lab notebook of hindfoot_length and weight! Let’s add it into the column manually here so that we don’t forget.\nWe can do that by renaming our column, using the rename() function.\n\nrename(surveys_subset,\n       hindfoot_length_cm = hindfoot_length,\n       weight_g = weight)\n\n# A tibble: 4,349 × 13\n   record_id month   day  year plot_id species_id sex   hindfoot_length_cm\n       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;      &lt;fct&gt;              &lt;dbl&gt;\n 1         1     7    16  1977       2 NL         M                     32\n 2       588     2    18  1978       2 NL         M                     NA\n 3      1453    11     5  1978       2 NL         M                     NA\n 4      3000     5    18  1980       2 NL         F                     31\n 5      5558     3    29  1982       2 NL         M                     33\n 6      6500     8    16  1982       2 NL         F                     33\n 7      8657    11    13  1983       2 NL         F                     32\n 8      9605     9    30  1984       2 NL         F                     32\n 9     11215    12     8  1985       2 NL         F                     32\n10     11879     9     7  1986       2 NL         F                     32\n# ℹ 4,339 more rows\n# ℹ 5 more variables: weight_g &lt;dbl&gt;, genus &lt;chr&gt;, species &lt;chr&gt;, taxa &lt;chr&gt;,\n#   plot_type &lt;chr&gt;\n\n\nLet’s assign this dataframe to an object, by using the put &lt;- function.\n\nsurveys_subset_units &lt;- rename(surveys_subset,\n       hindfoot_length_cm = hindfoot_length,\n       weight_g = weight)\n\n\n4.6.2.1 An aside on naming conventions\nThere are several different styles of naming objects in R. We talked about this briefly last class when discussing how to name our functions. Naming things is one of the most difficult problems in data science since it can be instrumental in helping with maintenance of code and code-sharing These styles include:\n\ncamelCase\n\nThese names start with small letter and every subsequent word will start with upperCase letter\n\nPascalCase\n\nPascalCase is just like camel case but the only difference is the first letter is also UpperCase.\n\nsnake_case\n\nThese names are all lower case with underscore between the name.\n\nkebab-case\n\nthis is the style that is recommended to be avoided, because the - sign can be mistaken for the sign for subtraction! If you have a value saved in kebab, and another value saved in case, then R will try to find the difference between these two objects, as opposed to saving it as an object.\n\n\nWhere possible, avoid re-using names of common functions and variables. This will cause confusion for the readers of your code. This comes with more practice in common R packages - once you get a sense of the names of functions and data frames that already exist, you will know to avoid them!\nOther object-naming tips:\n\nchoose a convention and stick with it!\ndon’t use dots .\nuse names that are concise, meaningful, and consistent throughout your document. This is not easy!\ngenerally, variable names should be nouns, and function names should be verbs."
  },
  {
    "objectID": "lec03-dataframes-dplyr.html#footnotes",
    "href": "lec03-dataframes-dplyr.html#footnotes",
    "title": "4  Dataframes and Introduction to Data Wrangling",
    "section": "",
    "text": "Every time you call the function praise() you get praised once. Can you think of creative ways to get praised faster? (Hint 1: What about those loops we talked about earlier?) (Hint 2: Can we vectorize this operation and make the praising even more efficient?)↩︎\nTo install the kittyR package, use this code: devtools::install_github(\"IndrajeetPatil/kittyR\")↩︎\nThis course is focused on tidyverse functions, because that seems to be the trend these days. Although all of our teaching material is written in tidy lingo, it is mostly for the sake of consistency. In all honesty, tidy is pretty great, but some functions are more intuitive in base, so most people code in a mix of the two. If you learned base R elsewhere and perfer to use those functions instead, by all means, go ahead. The correct code is code that does what you want it to do.↩︎"
  },
  {
    "objectID": "projects.html#option-1-hypothesis-driven-project",
    "href": "projects.html#option-1-hypothesis-driven-project",
    "title": "5  Project description",
    "section": "5.1 Option 1: Hypothesis-driven project",
    "text": "5.1 Option 1: Hypothesis-driven project\nGroups will formulate their own hypotheses based on their interests within ecology and evolution. Groups will test predictions borne out of their hypotheses with reproducible and quantitative analysis techniques (e.g., ANOVA). If your group has an idea for statistical analyses that are beyond the scope of the course, please let us know. We are happy to support any groups who want to learn new tools, but expect that these groups are ready to learn how these tools work on their own; we hope to equip you with enough understanding to learn new things independently. Finally, the work must be original – while we may be repurposing data, we will not be simply redoing analyses. Keep in mind also that any work you do as part of this course may not be submitted for credit in another course (such as a fourth-year research project) and vice versa. While you may not submit your work for this course for credit in another course, you are welcome to publish or present your work in an academic setting.\nA note about community/citizen science websites: since the data is community-controlled, it may not always be research quality. There may be incorrect species IDs, inaccurate geolocations or time of observations, or discrepancies in protocols. When working with community science data, make sure that the data is cleaned and wrangled so that it is reliable. Quality control is a good first step when working with data, as simple errors can exist in any dataset.\n\n5.1.1 What is a hypotheses? What is a prediction?\nA hypothesis is a testable and falsifiable statement that offers a possible explanation of a phenomenon based on background knowledge, preliminary observations, or logic.\nE.g., Primary productivity is an important driver of mammal species richness.\nA prediction is based on a hypothesis. It is meant to describe what will happen in a specific situation, such as during an experiment, if the hypothesis is correct.\nE.g., If primary productivity is an important driver of mammal species richness, then more mammalian species would be found in sites with more plant biomass (proxy for primary productivity) compared with sites with less plant growth."
  },
  {
    "objectID": "projects.html#option-2-modeling",
    "href": "projects.html#option-2-modeling",
    "title": "5  Project description",
    "section": "5.2 Option 2: Modeling",
    "text": "5.2 Option 2: Modeling\nGroups will develop a mathematical model to answer a question in ecology and/or evolution they find interesting. There are many reasons to develop models: they help clarify assumptions, generate predictions, nullify hypotheses, provide mechanistic explanations for observed data, and help us know what kinds of data to look for. New models almost always build on existing and well-studied ones (e.g., the Lotka-Volterra model). The fact models are simplifying representations of the real world is by design! The goal of building a model is to identify the key features that make a process interesting, represent the process mathematically (and, in doing so, clarify what assumptions are being made!), characterize the behavior of the model, and from this characterization draw conclusions about how the process being modeled works. Characterization of a model can involve mathematical analysis, simulation, and confrontation with data.\nThe key steps in this project are to 1) identify an interesting question in ecology or evolution, 2) develop (and likely revise) a model to address that question, 3) characterize the behavior of the model, and 4) draw biological conclusions from the model and its characterization.\nIf you are interested in modeling, let Vicki and Mete know as soon possible!"
  },
  {
    "objectID": "projects.html#option-3-simulation-study",
    "href": "projects.html#option-3-simulation-study",
    "title": "5  Project description",
    "section": "5.3 Option 3: Simulation study",
    "text": "5.3 Option 3: Simulation study\nSimilar to Option 1, groups that do a simulation study will formulate hypotheses and use reproducible and quantitative analysis techniques to test predictions borne out of those hypotheses. The difference is that students will simulate their own data, instead of using an existing dataset. One reason to do a simulation study is to see what kind of data would be needed to test a hypothesis in the field, e.g., how much data would be needed to find a significant association between response and predictor variables.\nIf you are interested in doing a simulation study, let Vicki and Mete know as soon possible!"
  },
  {
    "objectID": "projects.html#finding-a-topic",
    "href": "projects.html#finding-a-topic",
    "title": "5  Project description",
    "section": "5.4 Finding a topic",
    "text": "5.4 Finding a topic\nHere are some discussion questions to help you and your group work towards a research topic and set of hypotheses and predictions:\n\nWhat is a paper you read recently that you found really interesting?\nWhat is your favorite EEB course so far? Why did you like it?\nThinking about EEB professors, was there anyone whose work you are particularly interested in?\nBrowse through some recent issues of broad scope EEB journals such as Trends in Ecology and Evolution and Annual Review of Ecology, Evolution, and Systematics. Any articles catching your eyes?\nCheck out this paper. Any of those questions spark your interest?"
  },
  {
    "objectID": "projects.html#project-timeline-and-deliverables",
    "href": "projects.html#project-timeline-and-deliverables",
    "title": "5  Project description",
    "section": "5.5 Project timeline and deliverables",
    "text": "5.5 Project timeline and deliverables\nAs instructors, we are here to help your group work towards a project idea that you are excited about! We have included multiple check points and small assignments throughout the semester for you to get feedback on your project ideas and ask us questions.\n\n5.5.1 Project proposal\nDue Oct 3rd, worth 4% of final grade\nGood research takes time! The purpose of the proposal is to get your group started on this process early on so that you will have sufficient time to do your project justice. This will also serve as official documentation of your project development process. Your projects will likely evolve over time, and there can be many reasons for this. For instance, as you explore your data, you might be inspired to ask different questions, or you may need to refine your hypotheses due to limitations in the data. All of these are fine, in fact, it happens all the time in real research settings.\nInclude the following information in your proposal:\n\nOption 1: your hypotheses and predictions (point form or short paragraph) and data source (short paragraph). Include a citation, a brief description of how the data was collection, and which section of the dataset you plan to use in your analysis (e.g., which columns).\nOption 2: a question you want to answer using a mathematical model (short paragraph describing the problem and the value modeling may add). Be sure to include a description of the variables that you may want to track and the kind of model you envision using.\nOption 3: same as 1, except with a description of how to simulate the data.\n\n\n\n5.5.2 Mid-project update\nDue Nov 2nd, worth 6% of final grade\nThe purpose of the mid-project update is to ensure you are on track with your projects. By now, you should have completed your exploratory data analyses, modeling, or simulation. You should have also solidified your hypotheses, predictions, and analyses plan. Essentially, you should be ready to write the Methods section of your report!\nIncluded the following information in your mid-project review:\n\nOptions 1 and 3:\n\n\nYour hypotheses and predictions (point form or short paragraph). If these differ from the ones in your proposal, explain clearly the rationale for the change.\nA detailed description of your data (a paragraph), including how the data was collected or simulated, along with any manipulation(s) you performed to get your data ready for the analysis.\nYour analysis plan (a paragraph): describe the statistical test(s) that you will use to test each prediction, including how you will validate the assumptions of each test.\n\n\nOption 2:\n\n\nA detailed description of the question you want to answer, any previous work (modeling and otherwise), the model you have built to answer this question, and your modeling assumptions.\nDetailed descriptions of the model analysis and biological interpretations of the results so far.\nYour analysis plan (a paragraph): describe additional analysis that you will do and any assumptions you would like to relax.\n\n\n\n5.5.3 Presentation\nDue Dec 5th, worth 10% of final grade\nThe presentations will be held on the last day of class during regular class hours (Dec 5th, 2-4 pm). Each presentation will be 10 minutes long, followed by 2 minutes of questions from the audience. If you cannot make it to class for your presentation, please get in touch with us to make alternative arrangements no later than Dec 1st.\n\n\n5.5.4 Report\nDue Dec 8th, worth 20% of final grade\nThis report will be styled as a journal article, with these sections:\n\nAbstract\nIntroduction\nMethods (including “Data Description” and “Data Analysis” subsections)\nResults\nDiscussion\nReferences\nSupplementary material consisting of data and code required to reproduce analysis\n\nFor your sake (and ours), we are enforcing a two page limit (single spaced, excluding figures, tables, code, references, and appendices). Please use a standard font, size 12, with regular margins. One goal of this assignment is to write clearly and concisely – it is often clarifying to put your analyses in as few words as possible.\nFor the report, you are expected to:\n\nPut your research questions in the context of existing research and literature.\nHave clear and explicit objectives, hypotheses, and/or predictions.\nAdequately describe and properly cite the data source(s) you will analyze. If your project involves modeling, describe other modeling work that is relevant.\nDescribe your analysis in sufficient detail for others to understand.\nDiscuss the interpretation of your results and their implications.\n\nThe data and code associated with your report is expected to be entirely reproducible. Your supplementary files must include the following:\n\nA description of what every column/row in your submitted data file.\nA well-annotated R script or R notebook file. We must be able to run your code once you submit the project. This lesson on best practices for writing R code is a good starting place. Also check out this coding style guide and these simple rules on how to write code that is easy to read.\n\nHermann et al. 2016 is a great example of what we expect your code to look like. Refer to their supplementary materials for examples of how to describe your data set and how to annotate your code."
  },
  {
    "objectID": "projects.html#project-grading-rubric",
    "href": "projects.html#project-grading-rubric",
    "title": "5  Project description",
    "section": "5.6 Project grading rubric",
    "text": "5.6 Project grading rubric\n\n5.6.1 Project proposal\n4 marks total\nOption 1: Two marks each for 1) your hypotheses and associated predictions and 2) a description of your data source(s). Students are expected to demonstrate effort in formulating hypotheses and predictions, and identifying a suitable dataset.\nOption 2: Two marks each for 1) a clear description of the question or problem in ecology or evolution you would like to address using a model, and 2) a description of the kind of model you envision using, including what variables to track.\nOption 3: One mark for simulating realistic data using appropriate tools, and one mark for your hypotheses and associated predictions, and two marks for describing the appropriate analyses.\nThese components will be graded mostly on completion. The purpose of this assignment is to ensure you start early and are heading towards the right track.\n\n\n5.6.2 Mid-project update\n6 marks total\nOptions 1 and 3: Two marks are given to clearly stating hypotheses and predictions. In the case that these are different from the original submission in the proposal, the rationale for refinement needs to be clearly explained.\nEach of the following criteria are scored out of 2: 2 == excellent, 1.5 == good, 1 == acceptable, but needs improvement.\n\nData description\n\nThe data source(s) are sufficiently described, specifically, where was the obtained and how it was originally collected.\nThe data is sufficient described, including any initial observations from your exploratory data analyses.\nThe suitability of the data is justified.\nAny manipulations done to the data are thoroughly explained and well-justified.\n\nData analysis plan\n\nClearly lay out the statistical test(s) you will use to test each prediction.\nState how you will validating assumptions associated with each statistical test.\n\n\nOption 2: Each of the following criteria are scored out of 3: 3 == excellent, 2 == good, 1 == acceptable, but needs improvement.\n\nDescription of question, previous work, the model, modeling assumptions, and any predictions you have ahead of the analysis\n\nThe question you want to address and previous work in that direction (modeling or otherwise) is described in detail.\nThe relationship between the question/problem and modeling approach is clear and well-justified.\nModeling assumptions and choices (including limitations) are clear and well-motivated.\nPredictions for how the model will behave, what it might have to say about the question/problem, etc. are inclued and well thought out.\n\nAnalysis and analysis plan\n\nThe details of all analysis (mathematical or computational) are explained clearly.\nThe biological interpretations of results so far are clearly presented and their validity/applicability is discussed.\nClearly lay out plans for remaining analysis (e.g., relaxing model assumptions) and justify why they are reasonable.\n\n\n\n\n5.6.3 The presentation\n10 marks total\nEach of the following criteria are scored out of 3: 3 == excellent, 2 == adequate, 1 == needs improvement.\n\nContent – background and methods\n\nThe context for the study, along with hypotheses and predictions, are clearly set up.\nData source(s), manipulations, and statistical tests used are succinctly and adequately described.\nIf modeling, the relationship between the question/problem addressed and modeling approach is well-explained, and previous work (modeling or otherwise) is discussed.\n\nContent – results and conclusions\n\nResults are accurately described and interpreted, with particular attention to how they related to the hypotheses and predictions the group set out to test.\nThe conclusion to the study is succinct and clear.\n\nDelivery\n\nAll students participated in presenting the information.\nAll students spoke clearly and without jargon.\nThe presentation is well organized and ideas flowed naturally from one to the next.\nThe presentation is well rehearsed and is an appropriate length.\nFigures are easy to read (e.g., axis labels are big enough to read and are informative) and are explained thoroughly (e.g., x and y axis and what each data point is).\n\n\nThe final 1 mark will be assigned to the question period, and students will be assessed on whether they are able to answer questions thoughtfully.\n\n\n5.6.4 The report\n20 marks total\nEach of the following criteria are scored out of 4: 4 == excellent, 3 == good, 2 == acceptable, 1 == needs improvement.\n\nContent and concepts\n\nAuthors demonstrate a full understanding of the existing literature on the topic, and these concepts are critically integrated into their own insights.\nOptions 1 and 3: Hypotheses and predictions are clearly defined, and rational for choosing/simulating this data is justified.\nOption 2: The question, modeling approach, and relevant work are thoughtfully explained; the rationale for using the model (and its assumptions) is justified.\n\nCommunication\n\nWriting is succinct, clear, logical, and free of grammatical and spelling errors.\n\nAnalysis: see below.\nResults\n\nResults are accurately and sufficiently described.\nConclusions are supported by evidence.\nFigures and tables are clearly presented and are informative.\n\nCoding style and reproducibility\n\nData and code are well-organized and well-documented.\nThe analysis is easily reproducible.\n\n\nNote: marks for the 3rd criterion (Analysis) depend on if groups did a modeling or data-driven project:\nOptions 1 and 3: Statistical analysis\n\nStatistical tests chosen or modeling choices made are appropriate.\nAssumptions for each statistical test is validated.\nLimitations in the data and analysis are discussed.\n\nOption 2: Analysis of model\n\nCharacterization of the model is appropriate and explained in detail.\nImportantly, biological conclusions explained in detail and in terms of the processes described (or not described) by the model.\nLimitations of modeling assumptions are discussed, and extensions are proposed.\n\nPlease note that we are only going to be marking the two pages of your report. Please do not go over the page limit (with the exception of tables, figures, references, and appendices)."
  },
  {
    "objectID": "projects.html#tips-on-writingpresenting-a-research-project",
    "href": "projects.html#tips-on-writingpresenting-a-research-project",
    "title": "5  Project description",
    "section": "5.7 Tips on writing/presenting a research project",
    "text": "5.7 Tips on writing/presenting a research project\nWe know that students have very unique research interests and ideas, and we hope that your project encapsulates that! As instructors, we do not know everything, but we are excited to learn from you and your projects. Below are some tips that we have gathered that you may find helpful when preparing for the project presentation and writing your report.\n\nUse a title that summarizes your project/results clearly.\nDefine everything! Do not assume that we know about your question, study system, etc. For your presentations, adding some pictures will help when you are defining something.\nAfter introducing your study system, tell us clearly your hypothesis and prediction: “I hypothesize that there are more mosquitoes in the boreal forest because it is warmer. I predict this because insects have a thermal tolerance”. Then, after your methods, results, etc., remind us of your hypothesis again! For your presentation, you can even show the same slide you used for your hypothesis with a big red X or a big green checkmark. Assume we forgot and that we know nothing about the system.\nNEVER EVER USE THE WORD “prove”. Science cannot prove or disprove anything — the evidence can only support (or fail to support) how we think the world works.\nUse an appropriate font and font size. Also, use colours wisely (e.g., avoid red and blue together because of folks that are colourblind).\nA 10-minute presentation is about 10 slides (more or less depending on if you use animations). A note about animations: use “Appear”, not any of the fancy stuff. And no slide transitions!\nWe will ask questions after your presentation, but we are not trying to trick you — we just want more information. Give us your best answer, and remember that it’s okay to say “I don’t know, but I think that…” or “I can test this further by doing this”. At this point, you should know more about your projects than we do. Also, when preparing for the presentation, it useful to think about what questions listeners may have and try to answer them preemptively.\nPractice your presentation at least once with your group! It’ll get rid of any nerves you have if you already know the words you are going to say. It’ll also help you ensure that you speak louder and slower. We know you all will do great projects, and we are excited to hear about them!\n\nReading widely and often is one of the best ways to learn how to write well. Here are some papers which we think are clear, concise, and free of grammatical and logical flaws.\n\nViral zoonotic risk is homogenous among taxonomic orders of mammalian and avian reservoir hosts\nNonsystemic fungal endophytes increase survival but reduce tolerance to simulated herbivory in subarctic Festuca rubra\nEstimation of the strength of mate preference from mated pairs observed in the wild\nHumans introduce viable seeds to the Arctic on footwear\nEffects of environmental warming during early life history on libellulid odonates\nThe role of evolution in the emergence of infectious diseases\nCoevolution of parasite virulence and host mating strategies\nA rigorous measure of genome-wide genetic shuffling that takes into account crossover positions and Mendel’s second law\nThe role of divergent ecological adaptation during allopatric speciation in vertebrates"
  },
  {
    "objectID": "databases.html",
    "href": "databases.html",
    "title": "6  Some open-access databases",
    "section": "",
    "text": "Below are some resources that would be a good to look at if you are in search of data for the term project, or in search of a question in ecology or evolution:\n\nGenBank: annotated collection of all publicly available DNA/protein sequences. It is possible to download sequences manually, but command line tools can help to automate the process.\nPanTHERIA: database of ecology, life history, and geography of all extant and recently extinct mammal species. Includes body size, lifespan, litter size, and other trait data at the species level.\nGene Expression Omnibus: repository of gene expression, methylation, and annotated genomic data which are (like GenBank) most readily accessible using command line tools.\nContinuous Plankton Recorder Survey: data (going back to 1958!) on northern hemisphere plankton species, including the location (latitude, longitude) and date of sampling.\nRed-backed salamander abundance: abundance of red-backed salamanders from 4 sites in the Bruce Peninsula from 2004 to 2017.\nNorth American Bird Breeding Survey: repository containing information regarding the number of birds at multiple sites in North America. Many datasets of varying size that need to be linked together.\nMalaria Atlas Project: publicly available and up-to-date malaria prevalence and distribution data. Vector distribution, bednet coverage, etc. data also available.\n\nLet Vicki or Mete know if data from any of these resources interests you, or if you would like to discuss where data to answer questions you find interesting live (…or if they exist at all!)."
  }
]