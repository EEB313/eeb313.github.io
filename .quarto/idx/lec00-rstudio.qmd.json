{"title":"Getting started with RStudio and R Notebook","markdown":{"headingText":"Getting started with RStudio and R Notebook","headingAttr":{"id":"lec00r-studio","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, include = FALSE}\nsource(\"common.R\")\n```\n\n## Lesson preamble {-}\n\n> ### Lesson objectives\n> -   Introduce students to the RStudio interface\n> -   Introduce the Markdown syntax and how to use it within the R\n>     Notebook\n>\n> ### Learning outline\n> -   Explore RStudio interface (20 mins)\n> -   RMarkdown (20 mins)\n> -   Generating reports (10 mins)\n> -   Knit to PDF and submit on Quercus (10 mins)\n\n------------------------------------------------------------------------\n\n## Working with computers {-}\n\nBefore we get into more practical matters, we want to provide a brief\nbackground to the idea of working with computers. Essentially, computer\nwork is about humans communicating with a computer by modulating flows\nof current in the hardware in order to get the computer to carry out\nadvanced calculations that we are unable to efficiently compute\nourselves. Early examples of human computer communication were quite\nprimitive and included physically disconnecting a wire and connecting it\nagain in a different spot. Luckily, we are not doing this anymore;\ninstead we have programs with graphical user interfaces with menus and\nbuttons that enable more efficient human to computer communication.\n\n### Graphical user interfaces vs. text based user interfaces\n\nAn example of such a program that many of you are familiar with\nis spreadsheet software such as Microsoft Excel. Here, all the\nfunctionality of the program is accessible via hierarchical menus, and\nclicking buttons sends instructions to the computer, which then responds\nand sends the results back to your screen. For instance, I can click a\nbutton to send the instruction of coloring this cell yellow, and the\ncomputer interprets my instructions and then displays the results on the\nscreen.\n\nSpreadsheet software is great for viewing and entering small data sets\nand creating simple visualizations fast. However, it can be tricky to\ndesign figures, create automatic reproducible analysis\nworkflows, perform advanced calculations, and reliably clean data sets.\nEven when using a spreadsheet program to record data, it is often\nbeneficial to have some some basic programming skills to facilitate the\nanalyses of those data.\n\nTyping commands directly instead of searching for them in menus is a\nmore efficient approach to communicate with the computer and a powerful\nway of doing data analysis. This is initially intimidating for almost\nall people, but if you compare it to learning a new language, the\nprocess becomes more intuitive: when learning a language, you would\ninitially string together sentences by looking up individual words in\nthe dictionary. As you improve, you will only reference the dictionary\noccasionally since you already know most of the words. Eventually, you\nwill throw the dictionary out altogether because it is faster and more\nprecise to speak directly. In contrast, graphical programs force you to\nlook up every word in the dictionary every time, even if you already\nknow what to say.\n\n### RStudio and the R Notebook\n\nRStudio includes the R console, but also many other convenient\nfunctionalities, which makes it easier to get started and to work with\nR. When you launch RStudio, you will see four panels. Starting at the\ntop left and going clockwise, these panels are:\n\n-   The **text editor panel**. This is where we can write scripts, i.e.\n    putting several commands of code together and saving them as a text\n    document so that they are accessible for later and so that we can\n    execute them all at once by running the script instead of typing\n    them in one by one.\n-   The **environment panel**, which shows us all the files and objects we\n    currently loaded into R.\n-   The **files-plots-help panel**. This panel shows the files in the\n    current directory (the folder we are working out of), any plots we\n    make later, and also documentation for various packages and\n    functions.\n    Here, the documentation is formatted in a way that is easier to read\n    and also provides links to the related sections.\n-   The **console** is another space we can input code, only now the code is\n    executed immediately and doesn't get saved at the end.\n\nTo change the appearance of your RStudio, navigate to `Tools > Global Options > Appearance`.\nYou can change the the font and size, and the editor theme. The default is \"Textmate\", but\nif you like dark mode, I recommend \"Tomorrow Night Bright\". You can also change how your\npanels are organized. I like to have my Console and history below my Source, and that way \nI can see my working environment next to my code. That way, I know if an error I am getting is because I am missing an object or I renamed something oddly. Let's change that now. I recommend\nplaying around with the appearance if you prefer a different layout or colour scheme. Do what\nmakes you the most productive!\n\n\nAnother very useful thing with RStudio is that you have access to some\nexcellent cheat sheets in PDF format straight from the menu:\n`Help -> Cheatsheets`!    \n\nIn the RStudio interface, we will be writing code in a format called the\nR Notebook. As the name entails, this interface works like a notebook\nfor code, as it allows us to save notes about what the code is doing,\nthe code itself, and any output we get, such as plots and tables, all\ntogether in the same document.\n\nWhen we are in the Notebook, the text we write is normal plain text,\njust as if we would be writing it in a text document. If we want to\nexecute some R code, we need to insert a *code chunk*. \n\nYou insert a code\nchunk by either clicking the \"Insert\" button or pressing\n<kbd>Ctrl</kbd>/<kbd>Command</kbd> + <kbd>Alt</kbd> + <kbd>i</kbd>\nsimultaneously. You could also type out the surrounding backticks, but\nthis would take longer. To run a code chunk, you press the green arrow,\nor <kbd>Ctrl</kbd>/<kbd>Command</kbd> + <kbd>Shift</kbd> +\n<kbd>Enter</kbd>.\n\n```{r}\n\n1+1\n\n```\n\nAs you can see, the output appears right under the code block.\n\nThis is a great way to perform explore your data, since you can do your\nanalysis and write comments and conclusions right under it all in the\nsame document. A powerful feature of this workflow is that there is no\nextra time needed for code documentation and note-taking, since you're\ndoing your analyses and taking notes at the same time. This makes it\ngreat for both taking notes at lectures and to have as a reference when\nyou return to your code in the future.\n\n## R Markdown\n\nThe text format we are using in the R Notebook is called R Markdown.\nThis format allows us to combine R code with the Markdown text format,\nwhich enables the use of certain characters to specify headings, bullet\npoints, quotations and even citations. A simple example of how to write\nin Markdown is to use a single asterisk or underscore to *emphasize*\ntext (`*emphasis*`) and two asterisks or underscores to **strongly\nemphasize** text (`**strong emphasis**`). When we convert our R Markdown\ntext to other file formats, these will show up as italics and bold\ntypeface, respectively. If you have used WhatsApp, you might already be familiar\nwith this style of writing. In case you haven't seen it before, you have\njust learned something about WhatsApp in your quantitative methods\nclass...\n\nTo learn more about R Markdown, you can read the cheat sheets in RStudio\nand [RStudio Markdown reference\nonline](https://rmarkdown.rstudio.com/authoring_basics.html).\n\n### Saving data and generating reports\n\nTo save our notes, code, and graphs, all we have to do is to save the R\nNotebook file, and the we can open it in RStudio next time again.\nHowever, if we want someone else to look at this, we can't always just\nsend them the R Notebook file, because they might not have RStudio\ninstalled. Another great feature of R Notebooks is that it is really\neasy to export them to HTML, MS word, or PDF documents with figures and\nprofessional typesetting. There are actually many academic papers that\nare written entirely in this format and it is great for assignments and\nreports. (You might even use it to communicate with your collaborators!)\nSince R Notebook files convert to HTML, it is\nalso easy to publish [simple and good-looking websites](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/) in it, in which code chunks\nare embedded nicely within the text.\n\nLet's try to create a document in R.\n\nFirst, let's set up the [YAML](https://yaml.org/) block. This is found at the top of your\ndocument, and it is where you specify the title of your document, what\nkind of output you want, and a few other things such as author list and\ndate.\n\n```{r eval=FALSE}\n\n---\ntitle: \"Your title here\"\nauthor: \"Your name here\"\ndate: \"Insert date\"\n---\n\n```\n\nThen, let's type some notes and code together!\n\n```{r eval=FALSE}\n\n# Attempt 1\n\n## Here goes!\n\n```\n\n```{r}\n\n1+2+3+4\n\nx <- seq(0,100,1)\n\nplot(x, type = \"l\")\n\n```\n\nLet's see what this looks like. To create the output document, we\npoetically say that we will knit our R Markdown into the HTML document.\nLuckily, it is much simpler than actually knitting something. Simply\npress the `Knit` button here and the new document will be created.\n\nAs you can see in the knitted document, the title showed up as we would\nexpect, the lines with pound sign(s) in front of them were converted\ninto headers and we can see both the code and its output! So the plots\nare generated directly in the report without us having to cut and paste\nimages! If we change something in the code, we don't have to find the\nnew images and paste it in again, the correct one will appear right in\nyour code.\n\nWhen you quit, R will ask you if you want to save the workspace (that is, all of the variables you have defined in this session); in general, you should say “no” to avoid clutter and unintentional confusion of results from different sessions. Note: When you say “yes” to saving your workspace, it is saved in a hidden file named .RData. By default, when you open a new R session in the same directory, this workspace is loaded and a message informing you so is printed: `[Previously saved workspace restored]`.\n\n## Exercise {-}\n\n### Knitting and Submitting on Quercus\n\nPractice knitting and uploading your file to Quercus!\n\nClick the dropdown \"Knit\" button at the top of the screen, and click \"PDF\".\n\nNote: for assignments, submit PDF versions. If you are having trouble rendering your knitted file, you can submit HTML formats, or your .Rmd file as a last resort. Note that, if you are unable to knit your assignment, chances are there is an error. Make sure to double-check your code!\n\nHead on over to Quercus and submit your knitted PDF to \"Assignment 0\".\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"lec00-rstudio.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","theme":{"light":["cosmo","format/_light.scss"]},"code-copy":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}